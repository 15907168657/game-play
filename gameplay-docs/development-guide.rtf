{\rtf1\ansi\ansicpg1252\cocoartf1187
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Roman;
\f3\fmodern\fcharset0 CourierNewPS-BoldMT;\f4\fmodern\fcharset0 CourierNewPSMT;\f5\fmodern\fcharset0 Courier;
\f6\fmodern\fcharset0 Courier-Oblique;\f7\fnil\fcharset128 HiraKakuProN-W3;\f8\ftech\fcharset0 Wingdings-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green154\blue205;\red0\green194\blue254;\red245\green245\blue245;
\red191\green191\blue191;\red230\green230\blue230;\red217\green217\blue217;\red242\green242\blue242;\red0\green0\blue255;
\red163\green21\blue21;\red0\green128\blue0;\red0\green128\blue128;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid202\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid302\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid402\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid502\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid602\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid702\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid703\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid802\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid803\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid901\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid902\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-roman\}.}{\leveltext\leveltemplateid903\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid1002\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-roman\}.}{\leveltext\leveltemplateid1003\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
{\info
{\author user}
{\*\company Research In Motion Limited}}\margl1440\margr1440\vieww12840\viewh14520\viewkind1\viewscale80
\deftab720
\pard\pardeftab720\ri0

\f0\fs22 \cf0 \
\pard\pardeftab720\ri0

\fs24 \cf0 \
\pard\pardeftab720\ri0

\fs22 \cf0 \
\pard\pardeftab720\ri0

\fs24 \cf0 \
\pard\pardeftab720\ri0

\fs22 \cf0 \
\
\
\
\
\
\
\
\pard\pardeftab720\ri0\sa60\qc

\f1\b\fs72 \cf2 Development Guide
\f0 \
\pard\pardeftab720\ri0\sa60

\fs52 \cf2 \page \pard\pardeftab720\ri0\sa60

\f1 \cf2 Contents
\f0\fs72 \
\pard\pardeftab720\ri0

\b0\fs22 \cf2 \
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902766%22"}}{\fldrslt 
\f1\fs24 \cf2 Development Guide
\f0 	
\f1 1}}
\fs24 \
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902767%22"}}{\fldrslt 
\f1 \cf2 Contents
\f0 	
\f1 2}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902768%22"}}{\fldrslt 
\f1 \cf2 Overview
\f0 	
\f1 3}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902769%22"}}{\fldrslt 
\f1 \cf2 Compiling framework
\f0 	
\f1 5}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902770%22"}}{\fldrslt 
\f1 \cf2 Assets and authoring
\f0 	
\f1 12}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902771%22"}}{\fldrslt 
\f1 \cf2 Game
\f0 	
\f1 15}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902772%22"}}{\fldrslt 
\f1 \cf2 Input and sensors
\f0 	
\f1 18}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902773%22"}}{\fldrslt 
\f1 \cf2 Sprites and fonts
\f0 	
\f1 20}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902774%22"}}{\fldrslt 
\f1 \cf2 Scene and nodes
\f0 	
\f1 22}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902775%22"}}{\fldrslt 
\f1 \cf2 Model and mesh
\f0 	
\f1 28}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902776%22"}}{\fldrslt 
\f1 \cf2 Lights
\f0 	
\f1 30}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902777%22"}}{\fldrslt 
\f1 \cf2 Materials and shaders
\f0 	
\f1 33}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902778%22"}}{\fldrslt 
\f1 \cf2 Particle emitters
\f0 	
\f1 37}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902779%22"}}{\fldrslt 
\f1 \cf2 Physics
\f0 	
\f1 39}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902780%22"}}{\fldrslt 
\f1 \cf2 Animation
\f0 	
\f1 48}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902781%22"}}{\fldrslt 
\f1 \cf2 Audio
\f0 	
\f1 53}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902782%22"}}{\fldrslt 
\f1 \cf2 User Interface
\f0 	
\f1 55}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902783%22"}}{\fldrslt 
\f1 \cf2 Scripting
\f0 	
\f1 65}}\
\pard\tqr\tx9350\pardeftab720\li220\ri0
{\field{\*\fldinst{HYPERLINK "%5Cl%20%22_Toc330902784%22"}}{\fldrslt 
\f1 \cf2 License
\f0 	
\f1 71}}\
\pard\pardeftab720\ri0

\f2\fs22 \cf2 							 				\
\pard\pardeftab720\ri0
\cf3 \
\pard\pardeftab720\ri0\sa240

\f1\b\fs72 \cf2 Overview
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs24 \cf0 The gameplay framework is an open-source, cross-platform gaming framework that is designed to make it easy to learn to write 3-D mobile and desktop games using native C++. In this guide, we cover a top-down approach to teaching you the gameplay library, tools, and all the major parts of the APIs that are included in the framework. This guide covers a set of the C++ classes that you can use to write your games
\f0 .\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Design goals and considerations\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 In creating the gameplay framework, the goal was not only to focus on creating a high performance native C++ game framework, but also on a clean, simple, and elegant architecture. The framework uses a minimal set of cross-platform external dependencies and tries to take a minimalist approach to designing the classes. This approach allows you to learn from the classes in the library and extend the framework to build your own game engine or tools. The framework is a good starting block for learning how to write 3-D cross-platform mobile and desktop games, allowing you to spend more time designing your game.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Why write another game engine?\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 We actually hope it will be considered more of a gaming framework; however, in essence, it is really still just the core components of a game engine. There are several reasons why the gameplay framework was developed. \
\
First, most modern 3-D game engines, while sometimes free or cheap, are closed source. Additionally, they usually have licensing fees. The gameplay framework is free, open-source software under the Apache 2.0 license. We want more people to learn about the fact that cross-platform is a reality and building a good base lets you move forward to writing game titles.\
\
Secondly, a game engine is not only about rendering. Yes, it
\f0 \'92
\f1 s a huge part, but equally important are other aspects of game engines, such as audio, physics, animation, UI forms, particle emitters, scripting, and math. Searching on the web and trying to find information on how to fit these things into your game engine, or games, will likely scatter you across many different places, with the chance of gaps in your learning. This framework will hopefully bring it all together for you.\
\
Lastly, mobile is hot! The gameplay framework will have a lot of emphasis on gaming on mobile devices. Today, mobile gaming is the largest growing sector of the game industry. Additionally, we still provide support for desktop platforms for both tooling and gaming. However, we think more focus should be on mobile gaming and learning how to write games that can easily target the cross-platform mobile sector. \
\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Compiling framework
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs24 \cf0 To build the gameplay library, tools, and samples as well as write your own games, you will have to install and use the platform specific tools listed below. These are the supported development environments for each specific operating system as a target platform.\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3069\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clcbpat4 \clwWidth3149\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clcbpat4 \clwWidth3308\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f2\b\fs22 \cf0 Desktop OS\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Tool \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Development environment\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3069\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clcbpat6 \clwWidth3149\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clcbpat6 \clwWidth3308\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1\b0 \cf0 Microsoft Windows 7\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Visual Studio 2010\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Windows 7\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3069\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clcbpat4 \clwWidth3149\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clcbpat4 \clwWidth3308\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Apple Mac OS X\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Xcode 4.3.2\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Mac OS X\cell \lastrow\row
\pard\pardeftab720\ri0\qj

\f0 \cf0 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3155\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clcbpat6 \clwWidth3154\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clcbpat6 \clwWidth3267\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f2\b \cf0 Mobile OS\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Tool \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Development environment\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3155\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clcbpat4 \clwWidth3154\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clcbpat4 \clwWidth3267\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1\b0 \cf0 BlackBerry PlayBook OS 2.0
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 BlackBerry Native SDK 2.0\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Windows 7, Mac OS X\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3155\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clcbpat6 \clwWidth3154\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clcbpat6 \clwWidth3267\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Android 2.3
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Android NDK 7\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Windows 7, Mac OS X\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3155\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clcbpat4 \clwWidth3154\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clcbpat4 \clwWidth3267\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 iOS 5.1\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Xcode 4.3.2\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Mac OS X\cell \lastrow\row
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Project repository\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Included in the project repository are the following notable folder and files: \
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f2\b\fs22 \cf0 Folder/Files
\b0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\b \cf0 Description\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1\b0\fs24 \cf0 /bin
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Precompiled binary tools
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 /external-deps \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 External dependency libraries\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 /gameplay \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 The gameplay library\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 /gameplay-api \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Doxygen API Reference\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 /gameplay-docs \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Documentation guides and tutorials\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 /gameplay-encoder \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Game asset/content encoding tool\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 /gameplay-luagen\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Lua script bindings generator tool\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 /gameplay-template\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Game samples template project files\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 /gameplay-samples\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Game samples\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat7 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat7 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 gameplay.xcworkspace\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Xcode workspace\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat8 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat8 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 gameplay.sln\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Microsoft Visual Studio solution\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat7 \clwWidth3510\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat7 \clwWidth6048\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0 gameplay-newproject.bat/.sh\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 New cross-platform project script\cell \lastrow\row
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Getting started on desktop\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The quickest way to get started using the gameplay framework and tools is to simply start working in one of the desktop environments. You could use Microsoft Visual Studio 2010 Express, Professional on a Windows 7 operating system, or Xcode 4.3.2 on an Apple Mac OS X operating system. Then just open either the Microsoft Visual Studio solution or Xcode workspace, and build and run the projects. These solutions/workspaces are set up by default to build all the projects needed and to run the samples you have selected as active.\
\
Voila! You now have one of several simple, interactive samples running on your desktop environment, which you can explore and become more familiar with.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Game samples\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The gameplay-docs folder contains additional tutorial documentation for our gameplay-samples. These are intended to go into more detail for designing and coding games written using the framework. They all have a good starting point but have intentionally been left incomplete. This gives you the opportunity to change the samples, and complete them to make them more fun to interact and play with. They provide good building blocks and are a basis for you to explore various features in the framework. You can utilize code snippets from the samples to help speed up the development cycle in your own games.
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 API reference\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 We firmly believe in making a very intuitive set of APIs that are as straight-forward and as consistent as possible. However, all of the classes in the framework have been well documented with Doxygen formatting. The classes will be updated and improved iteratively throughout each release. This is to help you learn about what classes or sets of functions can be used and the recommended practices in using them.\
\
You should consider reading the latest versions of the API reference from the pre-generated HTML Doxygen API documentation in the gameplay-api folder. This will give you a deeper understanding of the C++ gameplay framework.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Getting started on mobile\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Now that you are up and running on one of the desktop environments, we recommend you take this seriously and go mobile! In today
\f0 \'92
\f1 s mobile game market, cross-platform development is a reality. It is quite simple and easy to use the gameplay framework to target a wider device audience. Start by downloading the native development kit for one of the various supported mobile operating system targets or set them all up. 
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Mobile setup instructions\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Listed below are the basic setup instructions for downloading and installing the supported mobile platform and development environments for gameplay.\
\
\pard\pardeftab720\ri0

\b \cf0 BlackBerry Native SDK 2.0/10 Beta (PlayBook tablets and BlackBerry 10 devices)
\f0\b0 \
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls1\ilvl0
\f2 \cf9 1.	{\field{\*\fldinst{HYPERLINK "https://bdsc.webapps.blackberry.com/native/download/"}}{\fldrslt \ul Download}}\ul  
\fs22 \cf0 \ulnone and install the BlackBerry Native SDK 2.0 or BlackBerry 10 Beta	\
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls1\ilvl0
\f1 \cf0 2.	Run the QNX Momentics IDE (Eclipse CDT based) and click 
\f0 \uc0\u8232 
\f1\b File > Import > Import Existing Projects
\f0\b0 .		\
\ls1\ilvl0
\f1 3.	Import all the gameplay projects by selecting the repository project folder.		\
4.	Set the active configuration to one of the Device-XXX or Simulator-XXX profiles.
\f0 \
\ls1\ilvl0
\f1 5.	Build and run any of the game samples.\
\pard\pardeftab720\li360\fi-180\ri0

\f0 \cf0 						\
\pard\pardeftab720\ri0

\f1\b\fs24 \cf0 Apple Xcode 4.3.2 (iPad tablets and iPhone devices)
\f0\b0 \
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls2\ilvl0
\f2 \cf9 1.	{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/xcode/"}}{\fldrslt \ul Download}}\ul  
\fs22 \cf0 \ulnone and install Apple Xcode 4.\
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls2\ilvl0
\f1 \cf0 2.	Open the 
\b gameplay.xc
\b0  workspace.
\f0 \
\ls2\ilvl0
\f1 3.	Change the active configuration to 
\b iOS Device
\b0 , 
\b iPhone Simulator
\f0 ,
\f1\b0  or 
\b iPad Simulator
\f0\b0 .\
\ls2\ilvl0
\f1 4.	Build and run any of the game samples.\
\pard\pardeftab720\li360\fi-180\ri0

\f0 \cf0 \
\pard\pardeftab720\ri0

\f1\b\fs24 \cf0 Android NDK 7 (Android tablets and devices)
\f0\b0 \
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls3\ilvl0
\f2 \cf9 1.	{\field{\*\fldinst{HYPERLINK "http://developer.android.com/sdk/ndk/index.html"}}{\fldrslt \ul Download}}\ul  
\fs22 \cf0 \ulnone and install Android NDK 7, Android SDK, Apache Ant, and GNU Make for Cygwin.  \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls3\ilvl1\cf0 a.	Setup the {\field{\*\fldinst{HYPERLINK "http://developer.android.com/sdk/index.html"}}{\fldrslt 
\fs24 \cf9 \ul \ulc9 Android SDK}}. \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls3\ilvl1
\f1 \cf0 b.	Make sure <android-sdk-path>/tools and <android-sdk-path>/platform-tools are added to PATH. \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls3\ilvl1
\f2 \cf0 c.	Setup the {\field{\*\fldinst{HYPERLINK "http://developer.android.com/sdk/ndk/index.html"}}{\fldrslt 
\fs24 \cf9 \ul \ulc9 Android NDK}}
\fs24 \cf9 \ul \ulc9  
\fs22 \cf0 \ulnone and {\field{\*\fldinst{HYPERLINK "http://developer.android.com/sdk/ndk/overview.html"}}{\fldrslt 
\fs24 \cf9 \ul follow these instructions}}. \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls3\ilvl1
\f1 \cf0 d.	Make sure <android-ndk-path> is added to PATH. \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls3\ilvl1
\f2 \cf0 e.	Install {\field{\*\fldinst{HYPERLINK "http://ant.apache.org/manual/install.html"}}{\fldrslt 
\fs24 \cf9 \ul Apache Ant}}. \
f.	Make sure <ant-path>/bin is added the PATH.\
g.	Install {\field{\*\fldinst{HYPERLINK "http://cygwin.com/install.html"}}{\fldrslt 
\fs24 \cf9 \ul Cygwin}}
\fs24 \cf9 \ul  
\fs22 \cf0 \ulnone and select and add the package 
\b make: The GNU version of the 'make' utility
\b0  during installation. \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls3\ilvl1
\f1 \cf0 h.	Rename 
\b awk.exe
\b0  to something else (awk_.exe for example) in <android-ndk-path>/prebuilt/windows/bin. This is to prevent the Android build system from being confused by the cygwin's awk
\f0 .	\
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls3\ilvl1
\f1 \cf0 2.	Build the gameplay library using following steps:  \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls3\ilvl1\cf0 a.	Open the Cygwin terminal. \
b.	Change to the 
\b <gameplay-root>/gameplay/android
\b0  folder. \
c.	Run the following command to generate the needed files to build the project:
\f0 \uc0\u8232 
\f3\b\fs24 > android.bat update project -t 1 -p . -s
\f0\b0 \
\ls3\ilvl1
\f1\fs22 d.	Run the following command to build the gameplay library:\
\pard\pardeftab720\li1440\ri0

\f3\b\fs24 \cf0 > ndk-build
\f4\b0 \
\pard\pardeftab720\fi1440\ri0

\f0 \cf0 \
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls4\ilvl1
\f1\fs22 \cf0 3.	Build a sample game(s) with following steps:  \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls4\ilvl1\cf0 a.	Open the Cygwin terminal. \
b.	Change to the:
\f0 \
\pard\pardeftab720\li1440\ri0\qj

\f1\b \cf0 <gameplay-root/gameplay-samples/sampleXX-XXXXX>/android
\b0  folder.
\f0 \
\pard\pardeftab720\li1440\fi-360\ri0\qj
\ls5\ilvl1
\f1 \cf0 c.	Run the following command to generate the needed files to build the project:
\f0 \uc0\u8232 
\f3\b\fs24 > android.bat update project -t 1 -p . -s
\f4\b0  
\f0\fs22 \
\ls5\ilvl1
\f1 d.	Run the following command to build the gameplay sample:
\f0 \uc0\u8232 
\f3\b\fs24 > ndk-build 
\f0\b0\fs22 \
\pard\pardeftab720\ri0

\fs24 \cf0 \
\pard\pardeftab720\li720\ri0

\f1\b\fs26 \cf0 Android NDK permissions errors:
\f0 \
\pard\pardeftab720\li720\ri0

\f1\b0\fs24 \cf0 If you see an error like 
\f4 "./obj/local/armeabi/libpng.a: No such file: Permission denied",
\f1  make sure that the 
\f4 "*.a" 
\f1 files have read permission by running:\
\pard\pardeftab720\li720\ri0

\f3\b \cf0 > chmod +r obj/local/armeabi/*.a
\f0 \
\pard\pardeftab720\ri0

\b0 \cf0 \
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls6\ilvl1
\f1\fs22 \cf0 4.	Connect the device and run the following command in the Cygwin terminal to deploy the game:\uc0\u8232 
\f3\b\fs24 > ant debug install
\f4\b0  
\f0\fs22 \
\pard\pardeftab720\ri0

\fs24 \cf0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Mobile platform considerations\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Ensure that you test early on the physical devices. Depending on the type of game you want to write and on your design ideas, you
\f0 \'92
\f1 ll want to get some idea of what type of performance you
\f0 \'92
\f1 ll get with the game plan and prototypes you are working towards. Be careful and do not to rely on desktop and mobile simulators as an indicator of performance or mobile device capabilities.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Game consoles and Linux distributions\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The gameplay framework can be extended to target game consoles and custom Linux distributions. Currently there is no support for these systems, however
\f0 \

\f1 Linux support will be coming soon
\f0 .\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Creating new projects\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 To create a new cross-platform game project, run the gameplay-newproject.bat/.sh script. The following is an example of running the gameplay-newproject.bat script:\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 1. Enter a name for the new project.\
\
   This name will be given to the project\
   executable and a folder with this name\
   will be created to store all project files.\
\
Project name: test\
\
\
2. Enter a game title.\
\
   On some platforms, this title is used to\
   identify the game during installation and\
   on shortcuts/icons.\
\
Title: Test\
\
\
3. Enter a short game description.\
\
Description: Test Game\
\
\
4. Enter a unique identifier for your project.\
\
   This should be a human readable package name,\
   containing at least two words separated by a\
   period (eg. com.surname.gamename).\
\
Unique ID: org.gameplay3d.test\
\
\
5. Enter author name.\
\
   On BlackBerry targets, this is used for\
   signing and must match the developer name\
   of your development certificate.\
\
Author: My Company\
\
\
6. Enter your game's main class name.\
\
   Your initial game header and source file\
   will be given this name and a class with\
   this name will be created in these files.\
\
Class name: TestGame\
\
\
7. Enter the project path.\
\
   This can be a relative path, absolute path,\
   or empty for the current folder. Note that\
   a project folder named test will also\
   be created inside this folder.\
\
Path: gameplay-samples\
\
    1 file copied.\
    ...\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 The simplest way to run the project on Windows is to add the Visual Studio project to the existing gameplay.sln solution, set the "gameplay" project as a dependency (right-click on the new project, click "Project Dependencies\'85", and select the "gameplay" project), and then build and run.\
\
Similarly, the easiest way to run the project on BlackBerry is import the new project into a QNX Momentics IDE workspace that already contains the gameplay project, set the "gameplay" project as a dependency (right-click the new project, click "Properties", go to "Project References", and select the "gameplay" project), and then build and run. (Note: make sure that both projects are set to the same Build Configuration.) \
\
To run the project on Mac, simply open the Xcode project and build and run.\
\
\pard\pardeftab720\ri0\qj
\cf0 To run the project on Android from Windows, use the 
\fs22 steps described above for running the samples.
\f0\fs24 \
\pard\pardeftab720\ri0\sa240

\f1\b\fs72 \cf2 Assets and authoring
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs24 \cf0 Game assets are extremely important for the quality of a good game. Not only do the game assets need to be fitted for the game design, but they also need to load as quickly as possible and at the highest quality within the platform hardware limitations.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Binary game assets\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 A very practical way to ensure that you
\f0 \'92
\f1 re being efficient is to always bundle and load all your game assets as binary formats. Common assets include images, fonts, audio, and 3-D scenes. Most game engines will always include some sort of authoring tool to allow developers to encode and process their content to be game-ready. The gameplay framework also includes an executable tool for this called the gameplay-encoder.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Using fonts and 3-D scenes\
\pard\pardeftab720\ri0

\f2\b0\fs24 \cf0 For fonts and 3-D scenes, you will want to support industry-standard file formats, such as {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/TrueType"}}{\fldrslt \cf9 \ul TrueType}}\cf9 \ul  \cf0 \ulnone for fonts and popular modern 3-D scene formats such as {\field{\*\fldinst{HYPERLINK "https://collada.org/mediawiki/index.php/COLLADA_-_Digital_Asset_and_FX_Exchange_Schema"}}{\fldrslt \cf9 \ul COLLADA}}\cf9 \ul  \cf0 \ulnone and the {\field{\*\fldinst{HYPERLINK "http://usa.autodesk.com/adsk/servlet/pc/index?id=6837478&amp;siteID=123112"}}{\fldrslt \cf9 \ul FBX}}\cf9 \ul  \cf0 \ulnone formats. \
\
Although these formats are popular and have the widest support in tooling options, they are not considered efficient runtime formats. The gameplay library requires that you convert these formats to its documented {\field{\*\fldinst{HYPERLINK "https://github.com/blackberry/GamePlay/blob/master/gameplay-encoder/gameplay-bundle.txt"}}{\fldrslt \cf9 \ul gameplay bundle format (.gpb)}}\cf9 \ul  \cf0 \ulnone using the gameplay-encoder executable.\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Pre-built gameplay-encoder tool
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs24 \cf0 The gameplay-encoder executable tool comes pre-built for Windows 7 and Mac OS X and can be found in the 
\b\fs22 <gameplay-root>/bin
\b0  folders. The general usage is:
\f0 \
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 >gameplay-encoder <options> files\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Building gameplay-encoder\
\pard\pardeftab720\ri0

\b0\fs22 \cf0 Even though the gameplay-encoder tool comes pre-built, you make want to customize it and built it again yourself. To build the gameplay-encoder project, open the gameplay-encoder project in Visual Studio or XCode and build the executable. 
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Building support for the FBX format
\f0 \
\pard\pardeftab720\ri0

\f2\b0\fs24 \cf0 Although the FBX format is supported by the gameplay-encoder tools, FBX is not allowed to be re-distributed as part of our framework. However, it is free for you to use. Simply download the {\field{\*\fldinst{HYPERLINK "http://usa.autodesk.com/adsk/servlet/pc/index?id=6837478&amp;siteID=123112"}}{\fldrslt \cf9 \ul FBX SDK}}\cf9 \ul  \cf0 \ulnone and then re-build the code in the gameplay-encoder using the USE_FBX preprocessor directive and ensure that you include the header and library paths in the project to the FBX SDK paths.\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Content pipeline\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The content pipeline for fonts and scenes works like this:
\f0 \
\pard\pardeftab720\li720\fi-360\ri0\qj
\ls7\ilvl1
\f1\fs22 \cf0 1.	Take any TrueType fonts or COLLADA/FBX scene files.		\
2.	Run the gameplay-encoder executable passing in the font or scene file path and optional parameters to produce a gameplay binary version for the file (.gpb).		\
3.	Bundle your game and include the gameplay binary file as a binary game asset.
\f0 \
\ls7\ilvl1
\f1 4.	Load any binary game assets using the 
\f4 gameplay::Bundle
\f1  class.
\f0 			\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Using binary bundles\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Use the 
\f4 gameplay::Bundle
\f1  class from your C++ game source code to load your encoded binary files as bundles. The class offers methods to load both fonts and scenes. Scenes are loaded as a hierarchical structure of nodes, with various entities attached to them. These entities include things like mesh geometry or groups of meshes, and cameras and lights. The 
\f4 gameplay::Bundle
\f1  class also has methods to filter only the parts of a scene that you want to load.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Release mode assets\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 When releasing your game title, all of the images should be optimized and converted to the compressed texture format that is supported by OpenGL (ES). Audio should be encoded to save space on storage. \
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Game\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::Game
\f1  class is the base class for all your games created with the gameplay framework. You are required to extend this class using C++ and to override the core game and lifecycle event methods initialize, finalize, update, and render. This is where you
\f0 \'92
\f1 ll write your code to load the game assets and apply game logic and rendering code. Under the hood, the game class will receive events and act as an abstraction between the running game and the underlying platform layer that is running the game loop and reacting to operating systems. \
\
There are four methods you must implement to get started in writing your own game: \
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 #include\cf0 \'a0\cf10 "gameplay.h"\cf0 \
 \
\cf9 using\cf0 \'a0\cf9 namespace\cf0 \'a0gameplay;\
 \
\cf9 class\cf0 \'a0MyGame\'a0:\'a0\cf9 public\cf0 \'a0Game\
\{\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0initialize();\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0finalize();	\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0update(\cf9 float\cf0 \'a0elapsedTime);\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0render(\cf9 float\cf0 \'a0elapsedTime);\
\};\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 The 
\f4 Game::initialize()
\f1  and 
\f4 Game::finalize()
\f1  methods are called when the game starts up and shuts down, respectively. They are the methods to which you
\f0 \'92
\f1 ll add code to load your game assets and cleanup when the game has ended. The 
\f4 Game::update()
\f1  and 
\f4 Game::render()
\f1  methods are called once per frame from the game loop implemented in the 
\f4 gameplay::Platform
\f1  for each operating system. This allows you to separate the code between handling updates to your game
\f0 \'92
\f1 s state and rendering your game
\f0 \'92
\f1 s visuals. You can use a variety of built-in classes to help with the game rendering.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Accessing the game instance\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::Game
\f1  class can be accessed from anywhere in your game code. It implements a singleton design pattern. Call the static method 
\f4 Game::getInstance()
\f1  to gain access to the instance of your game from any code. \
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Graphics and audio devices\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 After your game has started, the underlying graphics and audio devices will automatically initialize. This happens prior to the 
\f4 Game::initialize()
\f1  method being called and readies any classes that use OpenGL (ES) 2.0 or Open AL 1.1. The graphics devices of your 
\f4 Game
\f1  will be set up with a default 32-bit color frame buffer, a 24-bit depth buffer, and an 8-bit stencil buffer ready for your use. These are the active graphics hardware buffers, which are rendered into from your rendering code. \
\
For more advanced usage, you can apply alternative frame buffers using the 
\f4 gameplay::FrameBuffer
\f1  class. Immediately after the 
\f4 Game::render()
\f1  method, the frame buffer is swapped/presented to the physical display for the user to see. You can invoke the 
\f4 Game::clear()
\f1  method to clear the buffers through any of the methods. You can also call 
\f4 Game::renderOnce()
\f1  from code, such as from the 
\f4 Game::initialize()
\f1  method, to callback onto a method that will be called only once and then swapped/presented to the display. This is useful for presenting ad
\f0 -
\f1 hoc updates to the screen during initialization for rendering, such as loading screens.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Game sub-system controllers
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs24 \cf0 The 
\f4 gameplay::Game
\f1  class also manages game sub-system controllers, such as audio, animation and physics controllers, and provides access to them directly using getter methods. These classes act as controlling interfaces for managing and playing audio and animations that are active in the game, as well as updates to dynamics in the physics systems. These controllers are hosted by the 
\f4 gameplay::Game
\f1  class and react on lifecycle events being handled in the game.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Game time and state\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Once the instance of a 
\f4 gameplay::Game
\f1  class has started, the game starts a running time. You can call the 
\f4 Game::getGameTime()
\f1  to determine how long a game has been running. You can also call 
\f4 Game::getAbsoluteTime()
\f1  to determine the absolute time that has elapsed since the first 
\f4 Game::run()
\f1  call. This includes any paused time too. You can call the 
\f4 Game::pause()
\f1  method and the game will be put into the 
\f4 Game::PAUSED
\f1  state. If the user on the platform puts the game into the background, the game time is also paused. If the user puts the game back into the foreground, the game will invoke 
\f4 Game::play()
\f1  and the game will resume. At any time in the game you can determine the game state by calling 
\f4 Game::getState()
\f1 . The game state can be UNINITIALIZED, RUNNING or PAUSED.\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Input and sensors\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 By creating your game and extending 
\f4 gameplay::Game
\f1 , you
\f0 \'92
\f1 ll be able to add all the required handlers of input events. Additionally, there are methods on 
\f4 gameplay::Game
\f1  to poll for the current sensor data. This architecture insulates you, as a developer, from the platform-specific details on handling keyboard, touch and mouse events, and from polling the accelerometer state. The following illustrates overridden methods to handle input events:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 #include\cf0 \'a0\cf10 "gameplay.h"\cf0 \
 \
\cf9 using\cf0 \'a0\cf9 namespace\cf0 \'a0gameplay;\
 \
\cf9 class\cf0 \'a0MyGame\'a0:\'a0\cf9 public\cf0 \'a0Game\
\{\
\'a0\'a0\'a0\'a0...\
 \
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0keyEvent(Keyboard::KeyEvent\'a0evt,\'a0\cf9 int\cf0 \'a0key);\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0touchEvent(Touch::TouchEvent\'a0evt,\'a0\cf9 int\cf0 \'a0x,\'a0\cf9 int\cf0 \'a0y,\'a0\cf9 unsigned\cf0 \'a0\cf9 int\cf0 \'a0contactIndex);\
\'a0\'a0\'a0\'a0\cf9 bool\cf0 \'a0mouseEvent(Mouse::MouseEvent\'a0evt,\'a0\cf9 int\cf0 \'a0x,\'a0\cf9 int\cf0 \'a0y);\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0getAccelerometerValues(\cf9 float\cf0 *\'a0pitch,\'a0\cf9 float\cf0 *\'a0roll);\'a0\
\};\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Handling input events\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 You have the opportunity, on either desktop platforms or mobile devices, to handle mouse events uniquely from the 
\f4 Game::touchEvent()
\f1  method (this includes support for a Bluetooth enabled mouse). However, this is not required, and the default implementation of the 
\f4 Game::mouseEvent()
\f1  method returns 
\f4 false
\f1 , which means that the user can allow mouse events to be treated automatically as touch events.\
\
You can decide to disable multi-touch support for games when you do not want this functionality. You can call 
\f4 Game::setMultiTouch()
\f1  and pass in 
\f4 false
\f1  to ensure that the platform treats and handles touch events as single touches.\
You can also call 
\f4 Game::displayKeyboard()
\f1  to show or hide a virtual keyboard for platforms that support it. You
\f0 \'92
\f1 ll want to integrate it into points in the game and user interfaces in the game where text input is required.\
\
You can call 
\f4 Game::getAccelerometerValues()
\f1  and pass in pointers to parameters that will be populated with the current sensor values for the accelerometer.\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Sprites and fonts\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Use the 
\f4 gameplay::SpriteBatch
\f1  and 
\f4 gameplay::Font
\f1  classes to integrate simple 2-D sprite and text rendering for both 2-D and 3-D games. \
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Binary encoding fonts\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The first thing to do is to create or find a TrueType font that you want to use. There are a number of sites on the web that offer .TTF files to purchase, or tools to make them yourself.\
\
Next, you
\f0 \'92
\f1 ll want to binary encode your TrueType font to a binary format via gameplay-encoder to produce a binary file. To do this run the following command with your gameplay-encoder executable:\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 > gameplay-encoder -s 28 airstrip.ttf\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Drawing text and images\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The following code sample illustrates how to render an image and text together:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 void\cf0 \'a0MyGame::initialize()\
\{\
\'a0\'a0\'a0\'a0\cf11 //\'a0Create\'a0your\'a0sprite\'a0batch\'a0and\'a0font\'a0and\'a0associate\'a0resources\cf0 \
\'a0\'a0\'a0\'a0_batch\'a0=\'a0SpriteBatch::create(\cf10 "res/image.png"\cf0 );\
\'a0\'a0\'a0\'a0_font\'a0=\'a0Font::create(\cf10 "res/airstrip28.gpb"\cf0 );\
\}\
 \
\cf9 void\cf0 \'a0MyGame::render(\cf9 float\cf0 \'a0elapsedTime)\
\{\
\'a0\'a0\'a0\'a0\cf11 //\'a0Clear\'a0the\'a0frame\'a0buffer\cf0 \
\'a0\'a0\'a0\'a0clear(CLEAR_COLOR_DEPTH,\'a0Vector4(0,\'a00,\'a00,\'a01),\'a01.0f,\'a00);\
 \
\'a0\'a0\'a0\'a0\cf11 //\'a0Draw\'a0your\'a0sprites\'a0(we\'a0will\'a0only\'a0draw\'a0one\'a0now\cf0 \
\'a0\'a0\'a0\'a0_batch->begin();\
\'a0\'a0\'a0\'a0_batch->draw(Rectangle(0,\'a00,\'a0WINDOW_WIDTH,\'a0WINDOW_HEIGHT),\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Rectangle(0,\'a00,\'a0WINDOW_WIDTH,\'a0WINDOW_HEIGHT),\'a0Vector4::one());\
\'a0\'a0\'a0\'a0_batch->end();\
 \
\'a0\'a0\'a0\'a0\cf11 //\'a0Draw\'a0the\'a0text\'a0at\'a0position\'a020,20\'a0using\'a0red\'a0color\cf0 \
\'a0\'a0\'a0\'a0_font->start();\
\'a0\'a0\'a0\'a0\cf9 char\cf0 \'a0text[1024];\
\'a0\'a0\'a0\'a0sprintf(text,\'a0\cf10 "FPS:%d"\cf0 ,\'a0Game::getFrameRate());\
\'a0\'a0\'a0\'a0_font->drawText(\cf10 text,\'a020,\'a020,\'a0Vector4(1,\'a00,\'a00,\'a01),\'a0_font->getSize());\cf0 \
\'a0\'a0\'a0\'a0_font->finish();\
\}\
 \
\cf9 void\cf0 \'a0MyGame::finalize()\
\{\
\'a0\'a0\'a0\'a0\cf11 //\'a0Use\'a0built-in\'a0macros\'a0to\'a0clean\'a0up\'a0our\'a0resources.\cf0 \
\'a0\'a0\'a0\'a0SAFE_RELEASE(_batch);\
\'a0\'a0\'a0\'a0SAFE_RELEASE(_font);\
\}\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Batch, batch, batch\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 You
\f0 \'92
\f1 ll notice that the 
\f4 gameplay::SpritchBatch
\f1  and 
\f4 gameplay::Font
\f1  code sequences above both have a common flow to them. The developer performs a call to 
\f4 start()
\f1  followed by drawing operations and finishing with a call to 
\f4 finish()
\f1 . This is to support batching or combining drawing operations into a single hardware rendering call.\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Scene and nodes\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 At the heart of any game is a visual scene. Using the 
\f4 gameplay::Scene
\f1  class, you can create and retain a rich 3-D scene for organizing visual, audio, animation and physics components in your game.\
\
The 
\f4 gameplay::Scene
\f1  class is based on a hierarchical data structure that is often referred to as a scene graph. Using the 
\f4 gameplay::Scene
\f1  and 
\f4 gameplay::Node
\f1  classes, you can build up a game level by attaching various game components to the nodes in the scene. The node will maintain the transformation for any attachments. As a basic example, a scene might have two nodes. The first node could have a 
\f4 gameplay::Camera
\f1  attached to it and the second node could have a 
\f4 gameplay::Model
\f1  attached to it. The 
\f4 gameplay::Scene
\f1  will have the camera set as the active camera. You could then transform either/both of the nodes to change the player
\f0 \'92
\f1 s perspective on what they will see in the game.
\f0 \

\f1 There are a variety of components you can attach to the 
\f4 gameplay::Node
\f1  class:\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth4518\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5058\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f2\b\fs22 \cf0 Component\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Description\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth4518\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5058\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f4\b0 \cf0 gameplay::Model
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Used to represent the mesh/geometry in the scene
\f0 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth4518\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5058\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f4 \cf0 gameplay::Camera
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Used to represent a view/perspective into the scene
\f0 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth4518\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5058\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f4 \cf0 gameplay::Light
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Used to hold lighting information that can affect how a 
\f4 Model
\f1  is rendered
\f0 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth4518\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5058\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f4 \cf0 gameplay::PhysicsCollisionObject
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Used to define the basic physics dynamics that will be simulated
\f0 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth4518\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5058\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f4 \cf0 gameplay::ParticleEmitter
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Used to represent smoke, steam, fire and other atmospheric effects
\f0 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth4518\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5058\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f4 \cf0 gameplay::AudioSource
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Use to represent a source where audio is being played from
\f0 .\cell \lastrow\row
\pard\pardeftab720\ri0\qj
\cf0 \
\
\pard\pardeftab720\ri0

\f1\fs24 \cf0 A typical flow will have you loading/building a large scene representing all the components needed in the game level. This is done once during 
\f4 Game::initialize()
\f1 . For every call to the 
\f4 Game::update()
\f1  method, the code will update changes to the nodes and attached components based on events such as user input . Then the application will traverse the scene and render the parts in the scene that are visible from scene's active camera.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Exporting a 3-D scene from Autodesk Maya/Max
\f0 \
\pard\pardeftab720\ri0

\f2\b0\fs24 \cf0 If you want to export 3-D scenes, use the native FBX Export (for FBX) or DAE_FBX Export (for COLLADA). \
\
\
\pard\pardeftab720\ri0

\f0 \cf0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Exporting a 3-D scene from Blender\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Blender supports exporting to the COLLADA and FBX file formats. \
\pard\pardeftab720\ri0

\f0 \cf0 		
\fs22 	
\fs24 \
\pard\pardeftab720\li420\fi-420\ri0\qj

\f1\b\fs22 \cf0 File > Export > Autodesk FBX (.fbx)
\f0\b0 \

\f1\b File > Export > COLLADA (.dae)
\f0\b0 	\
\pard\pardeftab720\li360\fi-180\ri0
\cf0 						\
\pard\pardeftab720\ri0

\f1\fs24 \cf0 If you run into problems when using COLLADA files from Blender, try re-importing the COLLADA file back into Blender or Maya software to see if there is a problem with the exported model.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Binary encoding a scene\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Run gameplay-encoder with no arguments to see the usage information and supported arguments.\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 Usage: gameplay-encoder [options] 
\f6\i <filepath>
\f5\i0 \
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1\b \cf0 Example
\f0\b0 \
\
\pard\pardeftab720\ri0

\f1 \cf0 Convert the COLLADA file duck.dae into gameplay binary file duck.gpb.\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 > gameplay-encoder duck.dae\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Encoding an FBX file\
\pard\pardeftab720\ri0

\f2\b0\fs24 \cf0 To convert an FBX file to a gameplay binary file, you must install the FBX SDK and set the preprocessor directive USE_FBX. See the instructions in the \cf9 \ul gameplay-encoder README \cf0 \ulnone on GitHub.\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Loading a scene\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Using the 
\f4 gameplay::Bundle
\f1  class, you can load either an entire scene or various parts of a scene into any existing scene. The 
\f4 gameplay::Bundle
\f1  parses the binary file and de-serializes the objects from the file so that you can use them in your game. \
\
Here is an example of loading a simple scene containing a model of a duck, a light, and a camera from a gameplay binary file:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 void\cf0 \'a0MeshGame::initialize()\
\{\
\'a0\'a0\'a0\'a0\cf11 //\'a0Load\'a0the\'a0scene\'a0from\'a0our\'a0gameplay\'a0binary\'a0file\cf0 \
\'a0\'a0\'a0\'a0Bundle*\'a0bundle\'a0=\'a0Bundle::create(\cf10 "res/duck.gpb"\cf0 );\
\'a0\'a0\'a0\'a0Scene*\'a0scene\'a0=\'a0bundle->loadScene();\
\'a0\'a0\'a0\'a0SAFE_RELEASE(bundle);\
 \
\'a0\'a0\'a0\'a0\cf11 //\'a0Get\'a0handles\'a0to\'a0the\'a0nodes\'a0of\'a0interest\'a0in\'a0the\'a0scene\cf0 \
\'a0\'a0\'a0\'a0_modelNode\'a0=\'a0scene->findNode(\cf10 "duck"\cf0 );\
\'a0\'a0\'a0\'a0Node*\'a0_lightNode\'a0=\'a0scene->findNode(\cf10 "directionalLight1"\cf0 );\
\'a0\'a0\'a0\'a0Node*\'a0_cameraNode\'a0=\'a0scene->findNode(\cf10 "camera1"\cf0 );\
 \
\'a0\'a0\'a0\'a0\cf11 //\'a0More\'a0initialization\'a0...\cf0 \
\}\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Updating a scene\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 After handling input events or polling the sensors, it
\f0 \'92
\f1 s time to update the scene. It is very important to understand the scene representing your game level. We always want to update things that are impacted by the changes to optimize performance. In order to optimize the performance of your game, it is essential that you only update objects that need to be changed. In this example, we
\f0 \'92
\f1 ll apply a rotation when the user has touched the screen or mouse button:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 void\cf0 \'a0MyGame::update(\cf9 float\cf0 \'a0elapsedTime)\
\{\
\'a0\'a0\'a0\'a0\cf11 //\'a0Rotate\'a0the\'a0model\cf0 \
\'a0\'a0\'a0\'a0\cf9 if\cf0 \'a0(!_touched)\
\pard\pardeftab720\ri0

\fs22 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0_modelNode->rotateY(elapsedTime * MATH_DEG_TO_RAD(0.05f));
\fs19 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\fs20 \cf0 );\
\}\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Some examples of typical things you will want to update in your scene may include:\
\
\pard\pardeftab720\li420\fi-420\ri0\qj
\cf0 applying forces onto rigid bodies		\
applying transformations		\
starting or stopping animations		\
showing or hiding components\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Rendering a scene\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 To render a scene you
\f0 \'92
\f1 ll need to gather all the models in the scene that are attached to nodes and then draw them. Calling the 
\f4 Scene::visit()
\f1  method, the scene's hierarchical data structure is traversed and for each node in the scene, the specified method is invoked as a callback.\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 void\cf0 \'a0MyGame::render(\cf9 float\cf0 \'a0elapsedTime)\
\{\
\'a0\'a0\'a0\'a0\cf11 //\'a0Clear\'a0the\'a0buffers\'a0to\'a0black\cf0 \
\'a0\'a0\'a0\'a0clear(CLEAR_COLOR_DEPTH,\'a0Vector4::zero(),\'a01.0f,\'a00);\
 \
\'a0\'a0\'a0\'a0\cf11 //\'a0Visit\'a0all\'a0the\'a0nodes\'a0in\'a0the\'a0scene,\'a0drawing\'a0the\'a0models/mesh.\cf0 \
\'a0\'a0\'a0\'a0_scene->visit(\cf9 this\cf0 ,\'a0&MeshGame::drawScene);\
\}\
 \
\cf9 bool\cf0 \'a0MyGame::drawScene(Node*\'a0node,\'a0\cf9 void\cf0 *\'a0cookie)\
\{\
\'a0\'a0\'a0\'a0\cf11 //\'a0This\'a0method\'a0is\'a0called\'a0for\'a0each\'a0node\'a0in\'a0the\'a0scene.\cf0 \
\'a0\'a0\'a0\'a0Model*\'a0model\'a0=\'a0node->getModel();\'a0\
\'a0\'a0\'a0\'a0\cf9 if\cf0 \'a0(model)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0model->draw();\
\'a0\'a0\'a0\'a0\cf9 return\cf0 \'a0\cf9 true\cf0 ;\
\}\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Culling non-visible models\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 In some scenes, you may have many models contributing to the game level. However, with a moving camera, only some models will be visible at any particular time. Running the code in the snippet above on much larger scenes would cause many models to be drawn unnecessarily. To avoid this, you can query a 
\f4 gameplay::Node
\f1  class and retrieve a 
\f4 gameplay::BoundingSphere
\f1  using 
\f4 Node::getBoundingSphere()
\f1 . This bound represents an approximation of the representative data contained within a node. It is only intended for visibility testing or first-pass intersection testing. If you have a moving camera with many objects in the scene, ensure that you add code to test visibility from within your visitor callback. This will ensure the node is within the camera
\f0 \'92
\f1 s viewing range. To do this, make a simple intersection test between the front of each node and the active camera frustum (by calling 
\f4 Camera::getFrustum()
\f1 ) that represents the outer planes of the camera
\f0 \'92
\f1 s viewing area. Here is a snippet of code to perform such an intersection test:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 bool\cf0 \'a0MeshGame::drawScene(Node*\'a0node,\'a0\cf9 void\cf0 *\'a0cookie)\
\{\
\'a0\'a0\'a0\'a0\cf11 //\'a0Only\'a0draw\'a0visible\'a0nodes\cf0 \
\'a0\'a0\'a0\'a0\cf9 if\cf0 \'a0(node->getBoundingSphere()->intersect(_camera->getFrustum())\
\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Model*\'a0model\'a0=\'a0node->getModel();\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf9 if\cf0 \'a0(model)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0model->draw();\
\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\cf9 return\cf0 \'a0\cf9 true\cf0 ;\
\}\
\pard\pardeftab720\ri0\sa240

\f1\b\fs72 \cf2 Model and mesh\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::Model
\f1  class is the basic component used to draw geometry in your scene. The model contains a few key elements: a 
\f4 gameplay::Mesh
\f1 , an optional 
\f4 gameplay::MeshSkin
\f1  and one or more 
\f4 gameplay::Material
\f1 . These contribute to the information that is needed to perform the rendering of a model.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Mesh geometry\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::Mesh
\f1  class consists of a 
\f4 gameplay::VertexFormat
\f1  attribute. This attribute describes the layout for the vertex data as well as the actual vertex data, which is used as input in the rendering of the geometry. In addition, it holds one or more 
\f4 gameplay::MeshParts
\f1 . These parts define the primitive shapes and indices into the vertex data that describe how the vertices are connected.\
\
Game artists use 3-D modeling tools that are capable of organizing and splitting the vertex data into parts/subsets based on the materials that are applied to them. The 
\f4 gameplay::Mesh
\f1  class maintains one vertex buffer to hold all the vertices, and for each 
\f4 gameplay::MeshPart
\f1 , an index buffer is used to draw the primitive shapes.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 MeshSkin and Joints\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::Mesh
\f1  class supports an optional 
\f4 gameplay::MeshSkin
\f1 . This is used when loading models that represent characters in the game that have a skeleton consisting of 
\f4 gameplay::Joint
\f1  objects (bones). Vertex skinning is the term used to describe the process of applying a weighting or relationship with the Joints and their affected vertices. Using 3-D modeling tools, artists can add this additional weighting information onto the vertices in order to control how much a particular vertex should be impacted. This is based on the transformation of joints that can affect them. You will learn later how to apply special, skinned Materials that support this weighting. The gameplay 3-D framework supports a maximum of four blend weights per vertex. The 
\f4 gameplay::MeshSkin
\f1  class holds and maintains a hierarchy of 
\f4 gameplay:Joint
\f1  objects that can be transformed. A typical operation is to animate the transformation (usually only rotations) of the joints. The data within this class can be bound onto skinned Materials to ensure proper impact of weights onto their influenced vertices.\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Lights\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::Light
\f1  class can be attached to any 
\f4 gameplay::Node
\f1  in order to add lighting information into a 
\f4 gameplay::Scene
\f1 . This lighting information must be bound to the 
\f4 gameplay::Material
\f1  that is being applied onto the 
\f4 gameplay::MeshParts
\f1 . There are three types of lights in the gameplay 3-D framework - directional, point, and spot lights.\
\
All 
\f4 gameplay::Light
\f1  components can be loaded into a 
\f4 gameplay::Scene
\f1  using the 
\f4 gameplay::Bundle
\f1  class. However, it is your responsibility to bind the relevant lighting information stored in the light into the 
\f4 gameplay::Material
\f1  class.\
\
You can also programmatically create a light using the factory methods on the 
\f4 gameplay::Light
\f1  class. Here is an example of how to create and add a directional light to your scene and bind the lighting information onto a model's material(s):\
\pard\pardeftab720\ri0

\f4\fs22 \cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 void\cf0 \'a0MyGame::initialize()\
\{\
\'a0\'a0\'a0\'a0...\
 \
\'a0\'a0\'a0\'a0\cf11 //\'a0Create\'a0a\'a0node\'a0and\'a0light\'a0attaching\'a0the\'a0light\'a0to\'a0the\'a0node\cf0 \
\'a0\'a0\'a0\'a0Node*\'a0lightNode\'a0=\'a0Node::create(\cf10 "directionalLight1"\cf0 );\
\'a0\'a0\'a0\'a0Light*\'a0light\'a0=\'a0Light::createDirectional(Vector3(1,\'a00,\'a00));\
\'a0\'a0\'a0\'a0lightNode->setLight(light);\
 \
\'a0\'a0\'a0\'a0\cf11 //\'a0Bind\'a0the\'a0relevant\'a0lighting\'a0information\'a0into\'a0the\'a0materials\cf0 \
\'a0\'a0\'a0\'a0Material*\'a0material\'a0=\'a0_modelNode->getModel()->getMaterial();\
\'a0\'a0\'a0\'a0MaterialParameter*\'a0parameter\'a0=\'a0material->getParameter(\cf10 "u_lightDirection"\cf0 );\
\'a0\'a0\'a0\'a0parameter->bindValue(lightNode,\'a0&Node::getForwardVectorView);\
\}\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Pre-computed lighting maps\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Adding lighting information into 
\f4 gameplay::Material
\f1  adds computationally expensive graphics computations. In many games, there are usually multiple static lights and objects in the scene. In this relationship, the additive light colors contributing to the objects can be pre-computed during the design phase. 3-D modeling tools typically support the ability to compute the light's additive color contributions using a process called 
\i baking
\i0 . This process allows the artist to direct the contributing light and color information into a separate or combined texture so that this is not required during the rendering.\
You can optionally declare and pass in pre-generated light maps using the colored-unlit.frag/textured-unlit.frag shaders and specifying in your materials\
\pard\pardeftab720\ri0

\f4 \cf0 defines = TEXTURE_LIGHTMAP\
\pard\pardeftab720\ri0

\f1 \cf0 Then you just assign them using the sampler  
\f4 m_lightmapTexture
\f1  in your material definition to the image that was pre
\f0 -
\f1 generated that contains the light+color for your object. It is recommended to use 8-bit alpha textures to reduce the size.
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Directional lights\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 In most games, you
\f0 \'92
\f1 ll want to add a 
\f4 gameplay::Light
\f1  class whose type is 
\f4 Light::DIRECTIONAL
\f1 . This type of light is used as the primary light source, such as a sun or moon. The directional light represents a light source whose color is affected only by the constant direction vector. It is typical to bind this onto the 
\f4 gameplay::Materials
\f1  of objects that are dynamic or moving.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Point and spot lights\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Due to the expensive processing overhead in using point and spot lights, many games are designed to restrict point and spot light use to be static, baked into light and color maps. However, the point and spot light types add exceptional realism to games. Using them in separate or combined rendering passes, you can bind point and spot lights into material to add dynamic point and spot light rendering. All the built-in gameplay .materials files support directional, point and spot lights. Also, with minor modification to the shaders, you can add additional passes to combine two or more lights. It should be noted that there is a significant performance impact in doing this. For these cases, you
\f0 \'92
\f1 ll usually want to restrict the influence of lights on a material to no more than the one or two closest lights at a time. This can be achieved by using a simple test in the 
\f4 Game::update()
\f1  method to find the closest light to a 
\f4 gameplay::Model
\f1  and then bind them to the 
\f4 gameplay::Material
\f1  once they are found.\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Materials and shaders\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The gameplay 3-D framework uses a modern GPU shader based rendering architecture and uses OpenGL 2.0+ (desktop) or OpenGL ES 2.0 (mobile) along with the OpenGL Shading Language (GLSL). Currently, all the code in graphics-related classes uses the OpenGL hardware device directly.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Using materials\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::Material
\f1  class is the high level definition of all the rendering information needed to draw a 
\f4 gameplay::MeshPart
\f1 . When you draw a 
\f4 gameplay::Model
\f1 , the mesh
\f0 \'92
\f1 s vertex buffer is applied and for each 
\f4 gameplay::MeshPart
\f1  its index buffer(s) and 
\f4 gameplay::Materials
\f1  are applied just before the primitives are drawn. \
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 RenderState and Effects\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Each 
\f4 gameplay::Material
\f1  consists of a 
\f4 gameplay::RenderState
\f1  and a 
\f4 gameplay::Effect
\f1 . The 
\f4 gameplay::RenderState
\f1  stores the GPU render state blocks that are to be applied, as well as any 
\f4 gameplay::MaterialParameters
\f1  to be applied to the 
\f4 gameplay::Effect
\f1 . While a 
\f4 gameplay::Material
\f1  is typically used once per 
\f4 gameplay::MeshPart
\f1 , the 
\f4 gameplay::Effect
\f1  is created internally based on the unique combination of selected vertex and fragment shader programs. The 
\f4 gameplay::Effect
\f1  represents a common reusable shader program.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Techniques\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Since you can bind only one 
\f4 gameplay::Material
\f1  per 
\f4 gameplay::MeshPart
\f1 , an additional feature is supported that's designed to make it quick and easy to change the way you render the parts at runtime. You can define multiple techniques by giving them different names. Each one can have a completely different rendering technique, and you can even change the technique being applied at runtime by using 
\f4 Material::setTechnique(const char* name)
\f1 . When a material is loaded, all the techniques are loaded ahead too. This is a practical way of handling different light combinations or having lower-quality rendering techniques, such as disabling bump mapping, when the object being rendered is far away from the camera.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Creating materials\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 You can create a 
\f4 gameplay::Material
\f1  from the simple 
\f4 gameplay::Properties
\f1  based .material files. Using this simple file format, you can define your material, specifying all the rendering techniques and pass information.\
\
Here is an example of loading a .material file:\
\pard\pardeftab720\ri0

\f4\fs22 \cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 Material*\'a0planeMaterial\'a0=\'a0planeNode->getModel()->setMaterial(\cf10 "res/floor.material"\cf0 );\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Setting vs. binding material parameters\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Once you have created a 
\f4 gameplay::Material
\f1  instance, you
\f0 \'92
\f1 ll want to get its parameters and then set or bind various values to them. To set a value, get the 
\f4 gameplay::MaterialParameter
\f1  and then call the appropriate 
\f4 setValue()
\f1  method on it. Setting material parameter values is most common in parameters that are based on values that are constants.\
\
Here is an example of setting a value on a parameter:\
\pard\pardeftab720\ri0

\f4\fs22 \cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 material->getParameter(\cf10 "u_diffuseColor"\cf0 )->setValue(Vector4(0.53544f,\'a0\
						         0.53544f,\
                                                           0.53544f,\'a01.0f));\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 For values that are not constants and are determined from other objects, you
\f0 \'92
\f1 ll want to bind a value to it. When binding a value, you are giving the parameter a function pointer that will only be resolved just prior to rendering. In this example, we will bind the forward vector for a node (in view space).\
\
Here is an example of binding a value on a parameter:\
\pard\pardeftab720\ri0

\f0 \cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 material->getParameter(\cf10 "u_lightDirection"\cf0 )->bindValue(lightNode,\'a0\
                                                      &Node::getForwardVectorView);\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 .material files\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 As you can see in the following .material file, we have one Material, one Technique and one Pass. The main parts of this material definition are the shaders, uniforms, samplers and renderState. You will see certain upper case values throughout the file. These represent constant enumeration values and can usually be found in the 
\f4 gameplay::RenderState
\f1  or 
\f4 gameplay::Texture
\f1  class definitions:\
\pard\pardeftab720\ri0

\f0 \cf0 \
\pard\pardeftab720\ri0

\f5\fs20 \cf0 material duck\
\{\
    technique\
    \{	\
        pass 0\
        \{\
            // shaders\
            vertexShader = res/shaders/textured.vert\
            fragmentShader = res/shaders/textured.frag\
	     defines = SPECULAR\
            \
            // uniforms\
            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX\
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX\
            u_cameraPosition = CAMERA_WORLD_POSITION\
            \
            // samplers\
            sampler u_diffuseTexture\
            \{\
                path = res/duck-diffuse.png\
                mipmap = true\
                wrapS = CLAMP\
                wrapT = CLAMP\
                minFilter = NEAREST_MIPMAP_LINEAR\
                magFilter = LINEAR\
            \}\
            // render state\
            renderState\
            \{\
                cullFace = true\
                depthTest = true\
            \}\
        \}\
    \}\
\}\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Built-in shaders
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs22 \cf0 The 
\b <gameplay-root>/gameplay/res/shaders
\b0  directory contains a set of the most common shaders used in your games. To reduce shader code duplication the gameplay framework also supports declaring including of shader files within vertex and shader program files
\f0 .\

\f1 If there is an error compiling the shaders the expanded shader without the definitions is output with an .err file extension in the same directory where the file was loaded from. \

\f0 \

\f1\b Example:
\f0 \
\
\pard\pardeftab720\ri0

\f5\b0\fs20 \cf0 #include "lib/lighting.frag"\
\pard\pardeftab720\ri0

\f0\fs22 \cf0 \
\pard\pardeftab720\ri0

\f1\b\fs36 \cf0 Shader preprocessor definitions
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs22 \cf0 Using preprocessor definitions, the built-in shaders support various features
\f0 .
\f1  Adding certain shader definitions (defines=XXX) will require use specific uniform/samplers 
\f0 \'91
\f1 u_xxxxxxx
\f0 \'92.
\f1  You must set these in your vertex stream in your mesh and/or material parameters.
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Property inheritance
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs24 \cf0 When making materials with multiple techniques or passes, you can put any common things, such as renderState or shaders, above the material or technique definitions. The 
\f4 gameplay::Property
\f1  file format for the .material files supports property inheritance. Therefore, if you put the renderState in the material sections, then all techniques and passes will inherit its definition.
\f0 \
\pard\pardeftab720\ri0\sa240

\f1\b\fs72 \cf2 Particle emitters\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::ParticleEmitter
\f1  class defines all the information needed to simulate and render a system of particles. The emitter can be defined in various ways to represent smoke, steam, fire and other atmospheric effects, such as rain and lightning. Once created, the emitter can be set on a 
\f4 gameplay::Node
\f1  in order to follow an object, or it can be placed within a scene. \
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Particles as sprites\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 A 
\f4 gameplay::ParticleEmitter
\f1  always has a sprite/texture and a maximum number of particles that can be alive at any given time. After the emitter is created, these cannot be changed. Particles are rendered as camera-facing billboards using the emitter's sprite/texture. The emitter's sprite/texture properties determine whether the texture is treated as a single image, a texture atlas, or an animated sprite.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Particle properties\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 A 
\f4 gameplay::ParticleEmitter
\f1  also has a number of properties that determine values assigned to the individual particles it emits. Scalar properties, such as particle begin- and end-size, are assigned within a minimum and a maximum value; vector properties are assigned within the domain or space, and are defined by a base vector and a variance vector.\
\
The variance vector is multiplied by a random scalar between 1 and -1, and the base vector is added to this result. This allows an emitter to be created, which emits particles with properties that are randomized, yet fit within a well-defined range. To make a property deterministic, simply set the minimum value to the same value as the maximum for that property, or set its variance to a zero vector. To learn more about different scalars, vector and rendering properties that can be set on a 
\f4 gameplay::ParticleEmitter
\f1 , look at the C++ API.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Creating particle emitters\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Use the 
\f4 ParticlEmitter::create()
\f1  method to create an emitter from a particle file. The .particle file format and semantics are very similar to the .material file format. This is because it also leverages the 
\f4 gameplay::Properties
\f1  file definition and supports all the properties supported in the C++ API for the 
\f4 gameplay::ParticleEmitter
\f1  class.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Animated sprites for particles\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 It is very easy to make the particles animate through a list of images. Just make your images have a tile of sprite images and then modify the sprite
\f0 \'92
\f1 s base properties in the emitter to control the animation behavior.\
\
You can then even do things such as animate images of 3-D dice using only 2-D images.\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Physics\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The gameplay framework supports 3-D physics using the game service/controller 
\f4 gameplay::PhysicsController
\f1 . The 
\f4 gameplay::PhysicsController
\f1  class maintains a physics world that has gravity, and will simulate the objects you add to it.\
\
The gameplay physics system supports 3-D rigid body dynamics, including collision shapes, constraints, and a physics character class. To simulate objects within the physics world, you need to create a 
\f4 gameplay::PhysicsCollisionObject
\f1  object representing the geometry, or 
\f4 gameplay::Model
\f1 . By attaching a collision object to a 
\f4 gameplay::Node
\f1 , the rigid body will be added to the physics world and the simulation will automatically update the node
\f0 \'92
\f1 s transformation.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 PhysicsCollisionObject
\f0 \
\pard\pardeftab720\ri0

\f4\b0\fs24 \cf0 PhysicsCollisionObject
\f1  is the base class that provides an interface for receiving collision events. \
\
You can add collision listeners to a 
\f4 PhysicsCollisionObject
\f1  or test if the collision object currently collides with another collision object.\
\
There are 3 types of collision objects:		\
\pard\pardeftab720\li420\fi-420\ri0\qj
\cf0 PhysicsRigidBody		\
PhysicsGhostObject		\
PhysicsCharacter						\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 PhysicsRigidBody\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 A rigid body is an idealized, infinitely hard, non-deformable solid object. Rigid bodies have mass, shape and other properties that affect forces within the simulation. \
\
A 
\f4 PhysicsRigidBody
\f1  can be set to be a kinematic rigid body. A kinematic rigid body is an object that is not simulated by the physics system, and instead has its transform driven manually.\
\
\pard\pardeftab720\ri0

\b\fs26 \cf0 Create a PhysicsRigidBody\
\pard\pardeftab720\ri0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 To create a rigid body, first you need to know what kind of shape you want to simulate. The physics system supports boxes, spheres, meshes, capsules, and terrain height fields. For basic shapes, such as boxes and spheres, you can programmatically create the rigid bodies by calling 
\f4 Node::setCollisionObject()
\f1  and passing in the desired shape type.\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 PhysicsRigidBody::Parameters params;\
params.mass = 10.0f;\
node->setCollisionObject(PhysicsCollisionObject::RIGID_BODY, \
                         PhysicsCollisionShape::box(), &params);\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 All other types of rigid bodies must be created using the 
\f4 .scene
\f1  and 
\f4 .physics
\f1  property definition files. The 
\f4 .scene
\f1  file allows you to bind various attachments or properties to nodes, including a rigid body.\
\
For example, to create a mesh rigid body for the node within the scene with ID equal to tree_1:\
\
\pard\pardeftab720\ri0

\f0 \cf0 \
\
\pard\pardeftab720\ri0

\f1\b \cf0 game.scene:
\f0\b0 \
\pard\pardeftab720\ri0

\f4\fs22 \cf0 \
\pard\pardeftab720\ri0

\f5\fs20 \cf0 scene\
\{\
    ...\
    node tree_1\
    \{\
        ...\
        collisionObject = game.physics#tree_mesh\
    \}\
    ...\
\}\
\
\pard\pardeftab720\ri0

\f1\b\fs24 \cf0 game.physics:
\f0\b0 \
\pard\pardeftab720\ri0

\f4\fs22 \cf0 \
\pard\pardeftab720\ri0

\f5\fs20 \cf0 collisionObject tree_mesh\
\{\
    type = RIGID_BODY\
    shape = MESH\
    mass = 15.0\
    ...\
\}
\f4\fs22 \
   
\f0\fs24 \
\pard\pardeftab720\ri0

\f1\b\fs26 \cf0 RigidBody schema\
\pard\pardeftab720\ri0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 All properties have default values if not defined. See 
\f4 PhysicsRigidBody::Parameters
\f1  for more information.\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 collisionObject <string>\
\{\
    type                = <RIGID_BODY | GHOST_OBJECT | CHARACTER>\
    shape               = <BOX | SPHERE | MESH | HEIGHTFIELD | CAPSULE>\
    image               = <string> // only for HEIGHTFIELD\
    radius              = <float>     \
    height              = <float>\
    extents             = <float, float, float>\
    center              = <float, float, float>\
    centerAbsolute      = <float, float, float>\
\
    mass                = <float>\
    friction            = <float>\
    restitution         = <float>\
    linearDamping       = <float>\
    angularDamping      = <float>\
    kinematic           = <bool>    \
    anisotropicFriction = <float, float, float>\
    gravity             = <float, float, float>\
\}
\f4\fs22 \
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f2\b\fs22 \cf0  Shapes\cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0  Properties \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1\b0 \cf0  BOX \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0  extents, center, center-absolute \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  SPHERE \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0  radius, center, center-absolute \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  MESH \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0   \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  HEIGHTFIELD \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0  image \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5954\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  CAPSULE \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0  radius, height, center, center-absolute \cell \lastrow\row
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 PhysicsGhostObject\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 A ghost object is like a rigid body except that it does not have an effect the simulation. It will not cause forces or react to the other rigid bodies. Ghost objects have a shape but they do not have mass, or any of the properties that affect forces.\
\
Ghost objects are useful for querying the simulation, or detecting collisions without having rigid bodies react to the ghost object. A ghost object could be used to detect if an object entered a volume, such as a soccer ball going into a goal. This use of a ghost object is often called a volumetric trigger. Ghost objects can also detect if they collide with other ghost objects.\
\
Collision objects do not require a model so you could use a ghost object to check if a camera collides with a wall.\
\
\pard\pardeftab720\ri0

\b\fs26 \cf0 Creating a PhysicsGhostObject\
\pard\pardeftab720\ri0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Programmatically:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf11 //\'a0Create\'a0a\'a0ghost\'a0object\'a0with\'a0radius\'a05\cf0 \
node->setCollisionObject(PhysicsCollisionObject::GHOST_OBJECT,\
                         PhysicsCollisionShape::sphere(5.0f));\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\
\
\pard\pardeftab720\ri0

\f1 \cf0 In a .physics file:\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 collisionObject powerup\
\{\
    type = GHOST_OBJECT\
    shape = SPHERE\
    radius = 5.0\
\}\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1\b\fs26 \cf0 PhysicsGhostObject schema\
\pard\pardeftab720\ri0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Ghost objects only have a shape and support the same shapes as rigid bodies. 
\f0 \
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 collisionObject <string>\
\{\
    type                = GHOST_OBJECT\
    shape               = <BOX | SPHERE | MESH | HEIGHTFIELD | CAPSULE>\
    radius              = <float>\
    height              = <float>\
    extents             = <float, float, float>\
    center              = <float, float, float>\
    centerAbsolute      = <float, float, float>\
    image               = <string>  // HEIGHTFIELD shapes only.\
\}
\f4\fs22 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 PhysicsCharacter\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 PhysicsCharacter
\f1  class can be used to control the movements and collisions of a character in a game. It interacts with the physics system to apply gravity and handle collisions, however dynamics are not applied to the character directly by the physics system. Instead, the character's movement is controlled directly by the 
\f4 PhysicsCharacter
\f1  class. This results in a more responsive and typical game character than would be possible if trying to move a character by applying physical simulation with forces.
\f0 \
\
\
\
\pard\pardeftab720\ri0

\f1\b\fs26 \cf0 Creating a PhysicsCharacter\
\pard\pardeftab720\ri0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 To programmatically create a 
\f4 PhysicsCharacter
\f1  with mass 20 and capsule shape:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 PhysicsRigidBody::Parameters\'a0params(20.0f);\
node->setCollisionObject(PhysicsCollisionObject::CHARACTER,\
                         PhysicsCollisionShape::capsule(1.2f,\'a05.0f,\
                                                        Vector3(0,\'a02.5,\'a00), \cf9 true\cf0 ), \
						      &params);\
PhysicsCharacter*\'a0character\'a0=\'a0\cf9 static_cast\cf0 <PhysicsCharacter*>(\
                                                        node->getCollisionObject());\
\
\pard\pardeftab720\ri0

\f1\b\fs26 \cf0 PhysicsCharacter schema\
\pard\pardeftab720\ri0

\f0\b0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Physics characters have a mass and shape. A capsule is a typical shape for a typical biped character.
\f0 \
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 collisionObject <string>\
\{\
    type                = CHARACTER\
    shape               = <BOX | SPHERE | MESH | CAPSULE>\
    radius              = <float>\
    height              = <float>\
    extents             = <float, float, float>\
    center              = <float, float, float>\
    centerAbsolute      = <float, float, float>\
    mass                = <float>\
\}\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Creating a PhysicsContraint\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The gameplay framework supports various types of constraints between two rigid bodies (or one rigid body and the physics world), including hinge, fixed, generic (six-degree-of-freedom), socket, and spring. Constraints can be created programmatically using one of the create functions on 
\f4 gameplay::PhysicsController
\f1 , or they can be specified within the 
\f4 physics
\f1  section of the 
\f4 .scene
\f1  file. For example, to create a hinge constraint from within a 
\f4 .scene
\f1  file between the rigid body attached to the node with id door and the physics world:\
\pard\pardeftab720\ri0

\f0\b \cf0 \page \pard\pardeftab720\ri0

\f1 \cf0 game.scene:
\f0\b0 \
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 scene\
\{\
    ...\
    physics\
    \{\
        ...\
        constraint\
    	  \{\
            type = HINGE\
            rigidBodyA = door\
            rotationOffsetA = 0.0, 1.0, 0.0, 90.0\
            translationOffsetA = 0.0, 0.0, 2.0\
            limits = 0.0, 90.0, 0.5\
       \}\
    \}\
\}\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1\b \cf0 PhysicsConstraint schema
\f0\b0 \
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 constraint <string>\
\{\
    type   	          = <FIXED | GENERIC | HINGE |  SOCKET | SPRING>\
    rigidBodyA         = <string>\
    rigidBodyB         = <string>\
    translationOffsetA = <float, float, float>\
    translationOffsetB = <float, float, float>\
    rotationOffsetA    = <float>\
    rotationOffsetB    = <float>\
    angularLowerLimit  = <float, float, float>\
    angularUpperLimit  = <float, float, float>\
    linearLowerLimit   = <float, float, float>\
    linearUpperLimit   = <float, float, float>\
    limits             = <float, float, float>\
    angularDampingX    = <float>\
    angularDampingY    = <float>\
    angularDampingZ    = <float>\
    angularStrengthX   = <float>\
    angularStrengthY   = <float>\
    angularStrengthZ   = <float>\
    linearDampingX     = <float>\
    linearDampingY     = <float>\
    linearDampingZ     = <float>\
    linearStrengthX    = <float>\
    linearStrengthY    = <float>\
    linearStrengthZ    = <float>\
    breakingImpulse    = <float>\
\}
\f4\fs22 \
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth2855\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth9052\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f2\b\fs22 \cf0  Constraint Types \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0  Properties \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth2855\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth9052\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1\b0 \cf0  FIXED \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0   \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth2855\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth9052\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  GENERIC \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 translationOffsetA, translationOffsetB, rotationOffsetA, rotationOffsetB, angularLowerLimit, angularUpperLimit, linearLowerLimit, linearUpperLimit \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth2855\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth9052\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  HINGE \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 translationOffsetA, translationOffsetB, rotationOffsetA, rotationOffsetB, limits \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth2855\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth9052\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  SOCKET \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 translationOffsetA, translationOffsetB \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth2855\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth9052\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  SPRING \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 translationOffsetA, translationOffsetB, rotationOffsetA, rotationOffsetB, angularLowerLimit, angularUpperLimit, linearLowerLimit, linearUpperLimit, angularDampingX, angularDampingY, angularDampingZ, angularStrengthX, angularStrengthY, angularStrengthZ, linearDampingX, linearDampingY, linearDampingZ, linearStrengthX, linearStrengthY, linearStrengthZ \cell \lastrow\row
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Handling collisions\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The gameplay framework allows you to register to be notified whenever a collision occurs between two rigid bodies (and also when two rigid bodies stop colliding). In order to do this, you must define a class that derives from 
\f4 gameplay::PhysicsRigidBody::Listener
\f1  and implements the function 
\f4 collisionEvent(\'85)
\f1 . Then, you must add an instance of the class as a listener on a given rigid body using the 
\f4 PhysicsRigidBody::addCollisionListener
\f1  function. For example, to print all information for all collisions with the door and for collisions between the character and the wall:\
\pard\pardeftab720\ri0

\f0\b \cf0 \
\page \pard\pardeftab720\ri0

\f1 \cf0 MyGame.h:
\f0\b0 \
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 class\cf0 \'a0MyGame:\'a0\cf9 public\cf0 \'a0gameplay::PhysicsRigidBody::Listener\
\{\
\cf9 public\cf0 :\
\'a0\'a0\'a0\'a0...\
\'a0\
\'a0\'a0\'a0\'a0\cf11 /**\cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0
\cf11 \'a0\'a0\'a0\'a0\'a0*\'a0Collision\'a0event\'a0handler.\cf0 \
\cf11 \'a0\'a0\'a0\'a0\'a0*/\cf0 \
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0collisionEvent(PhysicsRigidBody::Listener::EventType\'a0type,\
                        \cf9 const\cf0 \'a0PhysicsRigidBody::CollisionPair&\'a0pair,\'a0\
\'a0\'a0\'a0\'a0\cf9 const\cf0 \'a0Vector3&\'a0pointA,\'a0\cf9 const\cf0 \'a0Vector3&\'a0pointB);\
\'a0\'a0\'a0\'a0...\
\};\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1\b \cf0 MyGame.cpp:
\f0\b0 \
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 MyGame*\'a0mygame;\
Node*\'a0door;\
Node*\'a0character;\
Node*\'a0wall;\
 \
...\
 \
door->getRigidBody()->addCollisionListener(mygame);\
character->getRigidBody()->addCollisionListener(mygame,\'a0wall);\
 \
...\
 \
\cf9 void\cf0 \'a0MyGame::collisionEvent(PhysicsRigidBody::Listener::EventType\'a0type,\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf9 const\cf0 \'a0PhysicsRigidBody::CollisionPair&\'a0pair,\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0      \cf9 const\cf0 \'a0Vector3&\'a0pointA,\'a0\cf9 const\cf0 \'a0Vector3&\'a0pointB)\
\{\
\'a0\'a0\'a0\'a0GP_WARN(\cf10 "Collision\'a0between\'a0rigid\'a0bodies\'a0%s\'a0(at\'a0point\'a0(%f,\'a0%f,\'a0%f)) "\
            "and\'a0%s\'a0(at\'a0point\'a0(%f,\'a0%f,\'a0%f))."\cf0 ,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0pair._rbA-getNode()-getId(),\'a0pointA.x,\'a0pointA.y,\'a0pointA.z,\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0pair._rbB-getNode()-getId(),\'a0pointB.x,\'a0pointB.y,\'a0pointB.z);\
\}\
\pard\pardeftab720\ri0\sa240

\f1\b\fs72 \cf2 Animation\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Animation is a key component to bringing your game to life. Within gameplay, there is support to create both property animations and character animations. The 
\f4 gameplay::Animation
\f1  class provides factory methods for creating animations on properties of classes that extend 
\f4 gameplay::AnimationTarget
\f1 . Character animations from within the scene file are imported and stored on the 
\f4 gameplay::AnimationTarget
\f1  they target. All animations on a 
\f4 gameplay::AnimationTarget
\f1  can be obtained by ID.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 AnimationTargets\
\pard\pardeftab720\ri0

\f4\b0\fs24 \cf0 gameplay::Transform
\f1 , 
\f4 gameplay::Node
\f1 , and 
\f4 gameplay::MaterialParameter
\f1  are animation targets.\
\
Animations can be created on the scale, rotation and translation properties of the 
\f4 gameplay::Transform
\f1 . Animations can also target any 
\f4 gameplay::Node
\f1 , which extends 
\f4 gameplay::Transform
\f1 . \
\
Also, animations can target instances of 
\f4 gameplay::MaterialParameter
\f1 . Any parameters on a material of type 
\f4 float
\f1 , 
\f4 integer
\f1 , or 2-, 3-, and 4-dimensional vectors can be animated.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Creating property animations\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Animations are created from the 
\f4 gameplay::AnimationTarget
\f1 . 
\f4 AnimationTarget
\f1  provides methods to create simple two key frame animations using 
\f4 createAnimationFromTo()
\f1 , and 
\f4 createAnimationFromBy()
\f1 . Multiple key frame sequences can be created from 
\f4 createAnimation()
\f1 . \
\
Here is an example of how to create a multiple key frame animation on a node
\f0 \'92
\f1 s translation properties:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 unsigned\cf0 \'a0\cf9 int\cf0 \'a0keyCount\'a0=\'a03;\'a0\'a0\'a0\
\cf9 unsigned\cf0 \'a0\cf9 long\cf0 \'a0keyTimes[]\'a0=\'a0\{0L,\'a0500L,\'a01000L\};\'a0\'a0\'a0\
\cf9 float\cf0 \'a0keyValues[]\'a0=\'a0\
\{\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a00.0f,\'a0-4.0f,\'a00.0f,\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a00.0f,\'a00.0f,\'a00.0f,\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a00.0f,\'a04.0f,\'a00.0f\'a0\'a0\'a0\
\};\'a0\'a0\'a0\
Animation*\'a0sampleAnim\'a0=\'a0enemyNode->createAnimation(\cf10 "sample"\cf0 ,\
                                                   Transform::ANIMATE_TRANSLATE,\'a0\
                                                   keyCount,\'a0keyTimes,\'a0keyValues,\'a0\
                                                   Curve::LINEAR);
\f4    
\f5 \
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Here is the same animation specified in a 
\f4 .animation
\f1  file that can also be loaded by the 
\f4 gameplay::AnimationTarget
\f1 :\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 animation sample\
\{\
    property = ANIMATE_TRANSLATE\
    keyCount = 3\
    keyTimes = 0, 500, 1000\
    keyValues = 0.0 -4.0 0.0 0.0 0.0 0.0 0.0 4.0 0.0\
    curve = LINEAR\
\}
\f4\fs22 \
\
\pard\pardeftab720\ri0

\f1\fs24 \cf0 To create the animation from this file you would call the following code: 
\f0 \
\pard\pardeftab720\ri0

\f4\fs22 \cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 Animation*\'a0sampleAnim\'a0=\'a0enemyNode->createAnimation(\cf10 "sample"\cf0 ,\'a0\cf10 "sample.animation"\cf0 );\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Curves\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 There are many different interpolation types defined within the 
\f4 gameplay::Curve
\f1  class that can be used to interpolate through the animation data.\
\pard\pardeftab720\ri0

\f0 \cf0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Character animations\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Character animations are complex because they can be composed of multiple animations targeting numerous joints within a character model. For this reason, character animations are usually included within the scene file and are imported when the 
\f4 .gpb
\f1  file is loaded. To simplify and optimize all animations under single animation. The gameplay-encoder supports grouping all the animation on joints leading up to a common root joint under a single animation. This is an option in the gameplay-encoder using the 
\f0 \'96
\f1 groupAnimations or 
\f0 \'96
\f1 g option. This groups them under a single animation called 
\f0 \'91
\f1 animations
\f0 \'92.\
\

\f1 These animations can be obtained by calling 
\f4 AnimationTarget::getAnimation()
\f1  specifying the animation
\f0 \'92
\f1 s ID.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 AnimationClips\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 A 
\f4 gameplay::AnimationClip
\f1  is created from the 
\f4 gameplay::Animation
\f1  class and is a snapshot of the animation that can be played back, manipulated with speed and repeated.\
\
Here is an 
\f4 AnimationClip
\f1  that has been created from a character animation of an elf:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 AnimationClip*\'a0elfRun\'a0=\'a0elfAnimation->createClip(\cf10 "elf_run"\cf0 ,\'a0200L,\'a0310L);\
elfRun->setRepeatCount(AnimationClip::REPEAT_INDEFINITE);\
elfRun->setSpeed(2.0f);\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Animation clips can be specified within an 
\f4 .animation
\f1  file that can be given to an animation to create clips. The total number of frames that make up the animation must be specified in the file. The begin and end parameters of each clip are specified in frames. An assumption that the animation runs at 60 frames per second has been made. Here is an example of an 
\f4 .animation
\f1  file for an elf animation:\
\pard\pardeftab720\ri0

\f0 \cf0 \
\pard\pardeftab720\ri0

\f5\fs20 \cf0 animation elf\
\{\
    frameCount = 350\
    clip idle\
    \{\
        begin =  0\
        end = 75\
        repeatCount = INDEFINITE\
    \}\
\
\
    clip walk\
    \{\
        begin = 75\
        end = 200\
        repeatCount = INDEFINITE\
    \}\
    clip run\
    \{\
        begin = 200\
        end = 310\
	  repeatCount = INDEFINITE\
        speed = 2.0\
    \}\
    clip jump\
    \{\
        begin = 310\
        end = 350\
        repeatCount = 1\
    \}\
\}
\f4\fs22  \
\
\
\pard\pardeftab720\ri0

\f1\fs24 \cf0 Animations can be played back by calling 
\f4 Animation::play()
\f1 , passing a clip ID, or by calling 
\f4 AnimationClip::play()
\f1  directly on the clip. Animations can also be paused and stopped in the same fashion.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Animation blending\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::AnimationClip
\f1  class has a blend weight property that can be used to blend multiple animations. There is also a method called 
\f4 AnimationClip::crossFade()
\f1  that conveniently provides the ability to fade the currently playing clip out and fade in the specified clip over a given period of time.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 AnimationClip listeners\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Animation events can be triggered on a 
\f4 gameplay::AnimationClip
\f1  by registering instances of 
\f4 gameplay::AnimationClip::Listener
\f1  with the clip. The listeners can be registered to be called back at the beginning or end of the clip, or at any specific time throughout the playback of the clip. This can be useful for starting a particle emitter when a character
\f0 \'92
\f1 s foot hits the ground in an animation, or to play back a sound of a gun firing during an animation of an enemy shooting.\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 Audio\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 You can integrate 3-D audio into your game using the audio services supported by gameplay. The framework uses a very traditional way of representing audio. The 
\f4 gameplay::AudioController
\f1  manages all of the playing audio sources.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Creating an AudioSource\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 An 
\f4 AudioSource
\f1  can be created from audio files or from a .audio property file. Ogg audio files are compressed, so they use less memory than .wav files.\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 AudioSource*\'a0wheelsSound\'a0=\'a0AudioSource::create(\cf10 "res/longboard.wav"\cf0 );\
AudioSource*\'a0backgroundMusic\'a0=\'a0AudioSource::create(\cf10 "res/music.ogg"\cf0 );\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Playing the AudioSource\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The following example illustrates how to play audio:\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 wheelsSound->play();\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Updating the AudioListener\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 By default, the 
\f4 AudioListener
\f1  is bound to the active camera of the scene. You can manually bind the camera to the 
\f4 gameplay::AudioListener
\f1  using 
\f4 gameplay::AudioListener::setCamera()
\f0 .\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Audio Properties\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The 
\f4 gameplay::AudioSource
\f1  class has methods for modifying the properties of the 
\f4 AudioSource
\f1 , such as pitch, gain, and velocity.\
\
Audio sources can be loaded from 
\f4 .audio
\f1  property files to make it easier to set these properties.\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 audio fireball\
\{\
    path = res/audio/fireball.wav\
    looped = false\
    gain = 0.7\
    pitch = 0.5\
    velocity = 0.5 0.0 1.0\
\}
\f4\fs22 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Binding an AudioSource to a node\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 An 
\f4 AudioSource
\f1  can be bound to a 
\f4 Node
\f1  in your scene using 
\f4 Node::setAudioSource()
\f1 . The position of the audio source is automatically updated when the node is transformed.\
\pard\pardeftab720\ri0\sa240

\b\fs72 \cf2 User Interface\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 The gameplay framework provides a set of user interface (UI) controls that can be used to create menus and HUDs. To add UI elements to your game, you'll create a form from a properties file and call update() and draw() on it. Other than adding listeners to buttons and modifying controls programmatically, there's not much code to write in your game. Most of the work of defining a form's look and feel happens in the .form and .theme files, as well as the texture atlas used by the theme.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Creating a form\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 To create a form, pass a properties file to 
\f4 Form::create()
\f1  to instantiate a form. The top-most namespace in the file must be named 'form'. The following properties are available for forms:\
\
\pard\pardeftab720\ri0

\f5\fs20 \cf0 form <formID> \
\{    \
    // Form properties.    \
    theme 			= <Path to .theme file>    \
    layout 			= <Layout::Type constant>    \
    style 			= <styleID>    \
    position 			= <x, y>   \
    alignment 		= <Control::Alignment constant>    \
    size   			= <width, height>    \
    autoWidth 		= <bool>    \
    autoHeight 		= <bool>   \
    width 			= <width>    \
    height 			= <height>\
        \
    // All the Controls within this Form.    \
    container \{ \}    \
    label \{ \}    \
    textBox \{ \}    \
    button \{ \}    \
    checkBox \{ \}    \
    radioButton \{ \}    \
    slider \{ \}   \
\}
\f4\fs22    
\f0\fs24 \
\pard\pardeftab720\ri0

\b \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Form property information:
\f0\b0 \
\
\pard\pardeftab720\ri0

\f1 \cf0 The following is a list of form properties, and their purpose:\
\
\pard\pardeftab720\ri0

\b \cf0 theme
\b0 : See "Creating a theme" below.\
\

\b layout
\b0 : Member of Layout::Type enum.\
\

\b style
\b0 : A style from the theme.\
\

\b position
\b0 : The on-screen position, in pixels.\
\

\b alignment
\b0 : Align the form's position within the bounds of the screen. Note the position property will be ignored if the 
\f4 alignment
\f1  property has been set.\
\

\b size
\b0 : The size of the form, in pixels.\
\

\b autoWidth
\b0 : Use of this property will result in a form with a width spanning the entire display. Note the width property will be ignored if 
\f4 autoWidth
\f1  has been set.\
\

\b autoHeight
\b0 : Use of this property will result in a form with a height spanning the entire display. The height property will be ignored if 
\f4 autoHeight
\f1  has been set.\
\

\b width
\b0 : Can be used in place of 
\f4 size
\f0 .\
\

\f1\b height
\b0 : Can be used in place of 
\f4 size
\f0 .\
\
\pard\pardeftab720\ri0

\f1 \cf0 A style determines the look of a control and is defined in the theme file, detailed below. Position and size attributes are determined for controls using the same properties as listed above for forms. Controls can be aligned within their parent container by using the 
\f4 alignment
\f1  property. Setting 
\f4 autoWidth
\f1  or 
\f4 autoHeight
\f1  to true will result in a control the width or height of its parent container. You can add controls to the form by placing namespaces within it. The available controls are:\
		\
\pard\pardeftab720\li420\fi-420\ri0\qj

\fs22 \cf0 Container: A container has all the same available properties as a form, except for 'theme'. You can add more controls within a container to group them together, and/or to apply a different layout type to a group of controls.		\
Label: A simple text label. Available properties: 'style', 'position', 
\f0 \'91
\f1 alignment
\f0 \'92
\f1 , 'size', 
\f0 \'91
\f1 autoWidth
\f0 \'92
\f1 , 
\f0 \'91
\f1 autoHeight
\f0 \'92
\f1 , and 'text'.		\
TextBox: Editable text label. A TextBox control has the same available properties as label.		\
Button: A button. A button control has the same available properties as label.		\
CheckBox: A button that toggles between 'checked' and 'unchecked' states when tapped or clicked. A CheckBox has the same available properties as label, plus 'checked' for its starting state.		\
RadioButton: RadioButton has the same available properties as CheckBox, with an additional property, 'group'. Only one radio button in a given group can be selected at a time.		\
Slider: A marker that can slide along a track between its end-caps. A slider makes use of the following properties: \
\pard\pardeftab720\ri0\qj

\f4 \cf0 \
\pard\pardeftab720\ri0\qj

\f5\fs20 \cf0 slider <controlID>\
\{  \
    style = <styleID>      // A style from the theme.  \
    position = <x, y>      // Position of the control on-screen, in pixels.  \
    size = <width, height> // The size of the control, in pixels.  \
    min = <float>          // The value of the left- / bottom-most point on the slider.  \
    max = <float>          // The value of the right- / top-most point on the slider.  \
    value = <float>        // The default position of the marker.  \
    step = <float>         // If greater than 0, force the marker to snap to discrete\
                           // multiples of \'91step\'92.\
    text = <string>        // Text to display above, below or alongside the slider\
                           // (depending on the style).\
\}
\f0\fs22 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Creating a theme\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 A theme contains the information a form needs to determine the look of its controls. A theme has one property, 'texture', which points to a texture atlas containing the images used by the theme. Cursor images, skins, and lists of images used by controls are defined in their own namespaces. The rest of the theme consists of style namespaces. A style describes the border, margin, and padding of a control, what images, skins, and cursors are associated with a control, and font properties to apply to a control's text.  \
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 theme\'a0<themeID>\
\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0texture\'a0=\'a0<Path\'a0to\'a0texture>\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
 \
\'a0\'a0\'a0\'a0cursor\'a0<cursorID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0region\'a0=\'a0<x,\'a0y,\'a0width,\'a0height>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0color\'a0=\'a0<#ffffffff>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
 \
\'a0\'a0\'a0\'a0imageList\'a0<imageID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0image\'a0checked\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0region\'a0=\'a0<x,\'a0y,\'a0width,\'a0height>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0image\'a0unchecked\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0region\'a0=\'a0<x,\'a0y,\'a0width,\'a0height>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0color\'a0=\'a0<#fffffffff>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0color\'a0=\'a0<#fffffffff>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
 \
\'a0\'a0\'a0\'a0skin\'a0<skinID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0border\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0top\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0bottom\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0left\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0right\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0region\'a0=\'a0<x,\'a0y,\'a0width,\'a0height>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0color\'a0=\'a0<#ffffffff>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
 \
\
\
\
\
\'a0\'a0\'a0\'a0style\'a0<styleID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0margin\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0top\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0bottom\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0left\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0right\'a0=\'a0<int>\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0padding\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0top\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0bottom\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0left\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0right\'a0=\'a0<int>\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0stateNormal\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0skin\'a0=\'a0<skinID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0imageList\'a0=\'a0<imageID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0cursor\'a0=\'a0<cursorID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0font\'a0=\'a0<Path\'a0to\'a0font>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0fontSize\'a0=\'a0<int>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0textColor\'a0=\'a0<#ffffffff>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0textAlignment\'a0=\'a0<Control::Alignmentconstant>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0rightToLeft\'a0=\'a0<bool>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0opacity\'a0=\'a0<float>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0stateFocus\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0skin\'a0=\'a0<skinID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0...\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0stateActive\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0skin\'a0=\'a0<skinID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0...\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0stateDisabled\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0skin\'a0=\'a0<skinID>\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0...\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\}\'a0\'a0\'a0\
\}\'a0\'a0\'a0\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\
\
\
\pard\pardeftab720\ri0

\f1\b \cf0 Theme property information:
\f0\b0 \
\
\pard\pardeftab720\ri0

\f1 \cf0 The following is a list of theme properties, and their sub-properties if applicable.\
\
\pard\pardeftab720\ri0

\b \cf0 texture
\b0 : The path to the texture atlas used by this theme. \
\

\b cursor
\b0 : Describes a single image, to be used as a cursor.\
\
Sub-properties of cursor:\
\
\pard\pardeftab720\li420\fi-420\ri0\qj

\fs22 \cf0 region: Region within the texture, in pixels.		\
color: Blend color to apply to this cursor.		\
imageList: A collection of images used by controls.  \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 image: A single image within the list.  \
\pard\pardeftab720\li1260\fi-420\ri0\qj
\cf0 region: Region within the texture, in pixels. \
color: Optionally override image-list blend color. \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 color: Default blend color for images that don't specify their own.\
\pard\pardeftab720\li360\fi-180\ri0

\f0 \cf0 						\
\pard\pardeftab720\ri0

\f1\b\fs24 \cf0 skin
\b0 : Defines the border and background of a control.\
\
Sub-properties of skin:\
\
\pard\pardeftab720\li420\fi-420\ri0\qj

\fs22 \cf0 border : The corners and edges of the given region will be used as border sprites.  \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 top : Height of top border, top corners. \
bottom: Height of bottom border, bottom corners. \
left: Width of left border, left corners. \
right: Width of right border, right corners.		\
\pard\pardeftab720\li420\fi-420\ri0\qj
\cf0 region: Total container region including the entire border. A region within the texture, in pixels.		\
color: The blend color to apply to this skin.\
\pard\pardeftab720\li360\fi-180\ri0

\f0 \cf0 \
						\
\pard\pardeftab720\ri0

\f1\b\fs24 \cf0 style
\b0 : A combination of theme attributes that can be applied to any control.\
\
Sub-properties of style:\
		\
\pard\pardeftab720\li420\fi-420\ri0\qj

\fs22 \cf0 margin: Layouts may make use of a style's margin to put space between adjacent controls.  \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 top: Empty space above a control. \
bottom: Empty space below a control. \
left: Empty space left of a control. \
right: Empty space right of a control.		\
\pard\pardeftab720\li420\fi-420\ri0\qj
\cf0 padding: The space between a control's border and its content.  \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 top: Empty space between the top border and content. \
bottom: Empty space between the top border and content. \
left: Empty space between the left border and content. \
right: Empty space between the right border and content.		\
\pard\pardeftab720\li420\fi-420\ri0\qj
\cf0 stateNormal: Properties used when a control is in the normal state.  \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 skin: Skin to use for border and background sprites. \
imageList: Images to use for this state. \
cursor: Cursor to use when the mouse is over this control. \
font: Font to use for rendering text. \
fontSize: Size of text. \
textColor: Color of text. \
textAlignment: Align text within the control
\f0 \'92
\f1 s content area. \
rightToLeft: Whether to draw text from right to left. \
opacity: Opacity to apply to all text/border/icon colors.		\
\pard\pardeftab720\li420\fi-420\ri0\qj
\cf0 stateFocus: Properties used when a control is in focus.  \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 Same properties as stateNormal. Unspecified properties will inherit from stateNormal.		\
\pard\pardeftab720\li420\fi-420\ri0\qj
\cf0 stateActive: Properties used when a control is active. This is when a touch/mouse is down within the control. If not specified, the normal overlay will be used.  \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 Same properties as stateNormal. Unspecified properties will inherit from stateNormal.		\
\pard\pardeftab720\li420\fi-420\ri0\qj
\cf0 stateDisabled: Properties used when a control is disabled. If not specified, the normal overlay will be used.  \
\pard\pardeftab720\li840\fi-420\ri0\qj
\cf0 Same properties as stateNormal. Unspecified properties will inherit from stateNormal.\
\pard\pardeftab720\li360\fi-180\ri0

\f0 \cf0 						\
\pard\pardeftab720\ri0

\f1\fs24 \cf0 The top-level property of a theme is the path to its texture atlas. This is a single image containing all the sprites used by the theme. The skin, cursor, and imageList namespaces within a theme file refer to regions of this image to use to represent their various states.\
\
\pard\pardeftab720\ri0

\b \cf0 Skin:
\b0  A rectangular area representing a border and background. A container namespace will specify the rectangular region and blend color as well as the border sizes. From this, the region will be divided into nine areas: four corners, four borders, and the center background area. Note that the top and bottom borders will be stretched horizontally; the left and right borders will stretch vertically; and the center of the container will stretch in both directions. The corners will never be stretched. It's perfectly valid to set any border size to 0. \
\

\b Cursor
\b0 : A single rectangular area representing a mouse cursor.\
\

\b ImageList
\b0 : A collection of images used by controls. Images for multiple control types can be combined into one list. Controls use the following images:		\
\pard\pardeftab720\li420\fi-420\ri0\qj

\fs22 \cf0 CheckBox: 'checked', 'unchecked'		\
RadioButton: 'selected, 'unselected'		\
Slider: 'minCap', 'maxCap', 'track', 'marker'		\
TextBox: 'textCaret'
\f0 						\
\pard\pardeftab720\ri0
\cf0 \
\pard\pardeftab720\ri0

\f1\fs24 \cf0 Note that you may specify separate image lists for each state in a style.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Adding a form to your game \
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Once you have a form, theme, and texture atlas, only a small amount of code is required in order to actually display your UI within your game. There are two options for displaying forms: two-dimensionally, where the form is drawn directly to the display and three-dimensionally, where the form is assigned to a node within the game's scene and displayed on a quad. \
\
The 2-D case is simple. To initialize a form, pass the path to your .form file to 
\f4 Form::create()
\f1  to be returned a pointer to your form. Now, simply call 
\f4 Form::update()
\f1  on the form during your game's 
\f4 update()
\f1  method, and call 
\f4 Form::draw()
\f1  on the form during 
\f4 render()
\f1  . See the section below on event handling to learn how to react to player input from within a form. \
\
The 3-D method of drawing forms is somewhat more advanced. For starters, you'll need a scene with at least one node in it. Call 
\f4 Node::setForm()
\f1  to attach the form to the node. This call will also generate a rectangular model with the dimensions of the form. Scale, rotate, and translate the node as necessary. Now, calling 
\f4 Form::draw()
\f1  on the form will render the contents of the form into a framebuffer and use that framebuffer to texture the form's model.\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Event handling within forms\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 Controls will trigger events when the user interacts with them. You can handle these events by setting listeners on individual controls. \
\
All controls can trigger the mouse / touch events 
\f4 PRESS
\f1  , 
\f4 RELEASE
\f1  , and 
\f4 CLICK
\f1  . Sliders, check boxes, and radio buttons can also trigger a 
\f4 VALUE_CHANGED
\f1  event so that you can update your game as a slider is moving or when a radio button becomes unselected. Finally, text boxes trigger a 
\f4 TEXT_CHANGED
\f1  event any time a character is entered or deleted (but not when the cursor is moved within the text box). Use 
\f4 TEXT_CHANGED
\f1  along with the 
\f4 getLastKeyPress()
\f1  method on a 
\f4 TextBox
\f1  to do things like accepting a player name when the return key is pressed. \
\
To retrieve a control from your form, call 
\f4 Form::getControl()
\f1  with the ID of the control you're looking for. Cast this to the correct control pointer type and then call 
\f4 addListener()
\f1  on it. This method takes an object that implements 
\f4 Control::Listener
\f1  as well as an int representing the events to listen for. You can bitwise-OR together event types. For example, the following code listens for 
\f4 PRESS
\f1  and 
\f4 RELEASE
\f1  events on a button: \
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 Button*\'a0myButton\'a0=\'a0\cf9 static_cast\cf0 <Button*>(myForm->getControl(\cf10 "myButton"\cf0 );\
myButton->addListener(\cf9 this\cf0 ,\'a0Control::Listener::PRESS\'a0|\'a0Control::Listener::RELEASE);
\f4  
\f5 \
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 In this example, the game itself implements 
\f4 Control::Listener
\f1 . This is easy to do as there's only one method a listener needs to implement, which should look something like this:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 void\cf0 \'a0MyGame::controlEvent(Control*\'a0control,\'a0EventType\'a0evt)\
\{\
\'a0\'a0\'a0\'a0\cf9 switch\cf0 (evt)\
\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\cf9 case\cf0 \'a0Control::Listener::PRESS:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf9 if\cf0 \'a0(strcmp(\cf10 "myButton"\cf0 ,\'a0control->getID())\'a0==\'a00)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf11 //\'a0Do\'a0something.\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf9 break\cf0 ;\
\'a0\'a0\'a0\'a0\cf9 case\cf0 \'a0Control::Listener::RELEASE:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf9 if\cf0 \'a0(strcmp(\cf10 "myButton"\cf0 ,\'a0control->getID())\'a0==\'a00)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf11 //\'a0Do\'a0something\'a0else.\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf9 break\cf0 ;\
\'a0\'a0\'a0\'a0\}\
\}\
\pard\pardeftab720\ri0

\f0\fs24 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Note that 
\f4 getControl()
\f1  is also a method on Container. If multiple controls share the same ID but are children of separate containers, the parent container can be retrieved first and then 
\f4 Container::getControl()
\f1  called to retrieve the specific control needed.
\f0 \
\pard\pardeftab720\ri0\sa240

\f1\b\fs72 \cf2 Scripting
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs22 \cf0 The gameplay framework has a full set of Lua script bindings allowing users to write the majority of their game completely from scripts. Also included is an open-source tool that can be used to generate bindings for user-defined classes (including classes that depend on features and technology of the gameplay framework itself).\
\pard\pardeftab720\ri0\sb480\sa120

\b\fs36 \cf0 Writing Lua scripts
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs22 \cf0 To write Lua scripts, you can use any text editor or IDE. If Visual Studio is your editor of choice, it is recommended that you install the Lua Language Support extension, which adds syntax highlighting to the editor (available here: {\field{\*\fldinst{HYPERLINK "http://vslua.codeplex.com/"}}{\fldrslt \cf9 \ul http://vslua.codeplex.com/}}).\
\
To generate your own bindings, you will need to download and install Doxygen (available here: {\field{\*\fldinst{HYPERLINK "http://www.doxygen.org"}}{\fldrslt \cf9 \ul http://www.doxygen.org}}).
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Lua Basics
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs22 \cf0 For an introductory look at scripting with Lua, including basic language features, visit {\field{\*\fldinst{HYPERLINK "http://www.lua.org/pil/"}}{\fldrslt \cf9 \ul http://www.lua.org/pil/}}. Note that the documentation available at this link is aimed at Lua 5.0 and will contain some outdated APIs. However, the basic usage of the language remains the same
\f0 .\
\

\f1 There are two conventions that gameplay uses within its Lua script bindings. First, in order to create a new object, the user calls the 
\b new
\b0  function on the class and passes the correct arguments for the corresponding C++ constructor. e.g.
\f5\fs20 \cf9  
\f0\fs22 \cf0 \
\pard\pardeftab720\ri0

\f5\fs20 \cf9 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0
\cf11 --\'a0Create\'a0a\'a0new\'a0Vector2\'a0object.\cf0 \
\pard\pardeftab720\ri0
\cf9 local\cf0 \'a0v\'a0=\'a0Vector2\cf12 .\cf0 new(1.0,\'a03.7)\
\
\pard\pardeftab720\ri0

\f1\fs22 \cf0 Second, to access or set a public member variable of a class, the user simply calls a Lua function with the same name, passing no arguments to access the variable or passing one argument in order to set the variable. e.g.
\f5\fs20 \cf9  \
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0
\cf11 --\'a0Print\'a0out\'a0the\'a0x\'a0member\'a0variable.\cf0 \
print(v\cf12 :\cf0 x())\
\'a0\'a0\'a0\'a0\
\cf11 --\'a0Set\'a0the\'a0y\'a0member\'a0variable\'a0to\'a04.2.\cf0 \
v\cf12 :\cf0 y(4.2)\
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Game 
\f0 \'96
\f1  Script Event Callbacks\
\pard\pardeftab720\ri0

\b0\fs22 \cf0 In order to write a game primarily using Lua scripts, one must register for the main game events (initialize, update, render, and finalize), along with the desired input event handlers. To do this, you must edit the 
\f0 \'91
\f1 scripts
\f0 \'92
\f1  section of the game
\f0 \'92
\f1 s game.config file. If the user has a Lua script with functions for the four major events and functions that handle the key and touch input, the 
\f0 \'91
\f1 scripts
\f0 \'92
\f1  section would look something like this:
\f0 \
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 scripts\
\{\
\'a0\'a0\'a0\'a0initialize\'a0=\'a0res/script.lua#initialize\
\'a0\'a0\'a0\'a0update\'a0=\'a0res/script.lua#update\
\'a0\'a0\'a0\'a0render\'a0=\'a0res/script.lua#render\
\'a0\'a0\'a0\'a0finalize\'a0=\'a0res/script.lua#finalize\
\'a0\'a0\'a0\'a0keyEvent\'a0=\'a0res/script.lua#keyEvent\
\'a0\'a0\'a0\'a0touchEvent\'a0=\'a0res/script.lua#touchEvent\
\}\
\pard\pardeftab720\ri0

\f0\fs22 \cf0 \

\f1 Then on the C++ side, as usual, you must derive a class from Game and create a static instance on the stack. However, in the case of a script-based game, the .h file can simply contain the class definition with all empty implementations while the .cpp file would contain the static instance. For example,\
\
MyScriptGame.h\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 \
class\cf0 \'a0MyScriptGame:\'a0\cf9 public\cf0 \'a0Game\
\{ \
\cf9 protected\cf0 :\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0initialize() \{\};\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0finalize() \{\};\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0update(\cf9 float\cf0 \'a0elapsedTime) \{\};\
\'a0\'a0\'a0\'a0\cf9 void\cf0 \'a0render(\cf9 float\cf0 \'a0elapsedTime) \{\};\
 \
\};\
\pard\pardeftab720\ri0

\f0\fs22 \cf0 \
\

\f1 MyScriptGame.cpp\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf9 \
#include\cf0 \'a0\cf10 "MyScriptGame.h"\cf0 \
 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0
\cf11 //\'a0Declare\'a0our\'a0game\'a0instance\cf0 \
MyScriptGame\'a0game;\
\pard\pardeftab720\ri0

\f0\fs22 \cf0 \

\f1 The sample does not require any other C++ implementation. For a complete sample game using the techniques described above, see sample05-lua as one-to-one mapping of sample00-mesh with a box instead of a duck. It also has some additional scripting code showcasing AIAgent and AIStates.
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Extending ScriptTarget \
\pard\pardeftab720\ri0

\b0\fs22 \cf0 To add scriptable events to your own class, you simply derive from the class 
\f4\fs24 gameplay::ScriptTarget 
\f1\fs22 and add the required function calls. First, to define the scriptable events that are supported for the class, we call addScriptEvent with the name of the event and, optionally (depending on if the callback takes arguments or not)
\f0 ,
\f1  the parameter string for a valid script callback function for that event (the parameter string follows the format of the parameter string argument to 
\f4\fs24 ScriptController::executeFunction
\f1\fs22 ). For example, to add a 
\f0 \'91
\f1 notify
\f0 \'92
\f1  event that passes an integer to the callback, we would do the following:
\f0 \
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 addScriptEvent(\cf10 "notify"\cf0 ,\'a0\cf10 "i"\cf0 );\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f1\fs22 \cf0 The supported format identifiers for passed parameters are as follows:
\f0 \
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f2\b \cf0  Format \cell 
\pard\intbl\itap1\pardeftab720\ri0
\cf0 Parameter Type (result)\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1\b0 \cf0  c, h, i, l
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Signed Integer (int)
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0  u
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Unsigned Integer (unsigned int)
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0  b
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Boolean (bool) \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat4 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat4 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0
\cf0  f, d
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Floating Point (double)
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0  s
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 String (char*)
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat8 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat8 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 p
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Pointer (void*)
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat6 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat6 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0  [x]
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Enum Value [x]
\f0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clcbpat8 \clwWidth3618\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalt \clcbpat8 \clwWidth5938\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf5 \clbrdrl\brdrs\brdrw20\brdrcf5 \clbrdrb\brdrs\brdrw20\brdrcf5 \clbrdrr\brdrs\brdrw20\brdrcf5 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 <x>
\f0 \cell 
\pard\intbl\itap1\pardeftab720\ri0

\f1 \cf0 Object References/Pointers <x>
\f0 \cell \lastrow\row
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0
\cf0 \
\pard\pardeftab720\ri0
\cf0 \

\f1 This step is usually done either in the constructor of the class or in a class initialization function. Next, the class will want to fire the event so that the script callback functions are actually called. This code is placed wherever it makes sense (depending on what the actual event is) and looks like so:\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0

\f5\fs20 \cf0 fireScriptEvent<\cf9 void\cf0 >(\cf10 "notify"\cf0 ,\'a014);\
\pard\pardeftab720\ri0

\f0\fs22 \cf0 \

\f1 The template argument corresponds to the return type of the callback function, the first parameter is the name of the event to fire, and the remaining arguments are the parameters to the actual callback function: in this case, the integer that is passed to the notify callback. To see a full example of a class that derives from 
\f4\fs24 gameplay::ScriptTarget 
\f1\fs22 within gameplay, take a look at the 
\f4\fs24 gameplay::Control 
\f1\fs22 class.
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Tips using Lua with gameplay
\f0 \
\pard\pardeftab720\li360\fi-360\ri0
\ls8\ilvl2
\f7\b0\fs22 \cf0 \uc0\u9827 
\f8 	
\f1 To get printf-like functionality using gameplay and Lua, use the Lua print() function (note: gameplay overrides the default Lua print() function)
\f0 .\
\ls8\ilvl2
\f7 \uc0\u9827 
\f8 	
\f1 To do integer like comparisons or casts on a number variable x in Lua, use math.floor(x)
\f0 .\
\ls8\ilvl2
\f7 \uc0\u9827 
\f8 	
\f1 Make sure all your member function calls use ':' instead of '.'\
\ls8\ilvl2
\f7 \uc0\u9827 
\f8 	
\f1 Remember to access all gameplay variables, including static and global variables with '()' on the end of the name.\
\ls8\ilvl2
\f7 \uc0\u9827 
\f8 	
\f1 Primitive data type arrays and object arrays are both inefficient when created in Lua and passed to C++, so try to minimize this.\
\ls8\ilvl2
\f7 \uc0\u9827 
\f8 	
\f1 There is no reasonable way to unload a Lua script; thus, the recommended usage pattern is to put each script's variables and functions inside a table (see Lua technical note 7 at {\field{\*\fldinst{HYPERLINK "http://www.lua.org/notes/ltn007.html"}}{\fldrslt \cf9 \ul http://www.lua.org/notes/ltn007.html}}). i.e.\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\li720\ri0

\f5\fs20 \cf11 \
--\'a0If\'a0you\'a0want\'a0to\'a0load\'a0the\'a0module\'a0at\'a0most\'a0once,\'a0add\'a0a\'a0line\'a0like\'a0this.\cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\li720\ri0
\cf9 if\cf0 \'a0Module\'a0\cf9 then\cf0 \'a0\cf9 return\cf0 \'a0\cf9 end\cf0 \
\'a0\'a0\'a0\'a0\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\li720\ri0
\cf11 --\'a0Declare\'a0the\'a0module\'a0Module.\cf0 \
Module\'a0=\'a0\{\}\
\'a0\'a0\'a0\'a0\
\cf11 --\'a0Declare\'a0a\'a0variable\'a0within\'a0the\'a0module.\cf0 \
Module\cf12 .\cf0 a\'a0=\'a047\
\'a0\'a0\'a0\'a0\
\cf11 --\'a0Declare\'a0a\'a0function\'a0within\'a0the\'a0module.\cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\li720\ri0
\cf9 function\cf0 \'a0Module\cf12 .\cf0 myFunc()\
\'a0\'a0\'a0\'a0\cf9 return\cf0 \'a0Module\cf12 .\cf0 a\'a0+\'a017\
\cf9 end\cf0 \
 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\li720\ri0
\cf11 --\'a0Cleanup\'a0function;\'a0call\'a0when\'a0done\'a0with\'a0this\'a0module.\cf0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\li720\ri0
\cf9 function\cf0 \'a0cleanupModule()\
\'a0\'a0\'a0\'a0Module\'a0=\'a0\cf9 nil\cf0 \
\cf9 end\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\li720\ri0
\cf0 \
\pard\pardeftab720\li360\fi-360\ri0
\ls9\ilvl2
\f7\fs22 \cf0 \uc0\u9827 
\f8 	
\f1 Note: you can't pass an enumeration value to a function that doesn't explicitly take an enumeration type (i.e. Control::setTextColor, which takes an unsigned char). In these cases, you need to look up the enumeration values and pass them directly.\
\ls9\ilvl2
\f7 \uc0\u9827 
\f8 	
\f1 On any function that returns a pointer that is owned by the user calling that function (i.e. a create() function), add @script\{create\} as the last line of its Doxygen comments.\
\ls9\ilvl2
\f7 \uc0\u9827 
\f8 	
\f1 On any function, variable, class, struct, enum, etc. that should not be accessible from Lua (except for things that are static to a .cpp file, which are already ignored), add @script\{ignore\} to its Doxygen comments.\
\ls9\ilvl2
\f7 \uc0\u9827 
\f8 	
\f1 On any functions, variables, classes, structs, enums, etc. that are local to a .cpp file, declare them as static 1) because it is good practice and 2) so that Lua does not generate bindings for them.
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Generating user defined script bindings
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs22 \cf0 The following instructions detail how to generate Lua script bindings for your own project. Note: this requires doxygen to be installed.\
\
\pard\pardeftab720\li720\fi-360\ri0
\ls10\ilvl2\cf0 1.	Copy the gameplay-luagen.doxyfile file to your project's root directory (and rename it). Then, either manually using a text editor or using the Doxywizard tool, go to the INPUT section and ensure both that the path to gameplay's 'src' folder is valid (relative to where the doxyfile is) and that your own source folder is added.\
2.	Run doxygen using the above doxyfile from your project's root directory. For example, run 
\f5 doxygen my-project.doxyfile
\f1  from the command line or run Doxygen using the Doxywizard application.\
3.	Create a 'lua' folder inside your source folder.\
4.	Run gameplay-luagen using the following command (make sure you have a trailing '/' for the output directory (second) parameter):\
\pard\pardeftab720\li720\ri0

\f0 \cf0 \
\pard\pardeftab720\li720\ri0

\f5 \cf0 path-to-gameplay/bin/your-platform/gameplay-luagen.exe ./xml path-to-your-source/lua/ <your-project-name-here>\
\pard\pardeftab720\li720\ri0

\f0 \cf0 \
\pard\pardeftab720\li720\ri0

\f1 \cf0 Note: the parameter <your-project-name-here> is used as the namespace that the bindings are generated within. This can be anything you want 
\b except
\b0  for "gameplay".\
\pard\pardeftab720\li720\fi-360\ri0
\ls11\ilvl2\cf0 5.	Ensure that your project has "path-to-gameplay/gameplay/src/lua" in its include path.\
6.	Add the generated Lua script bindings (.h/.cpp) files from path-to-your-source/lua to your project.\
7.	Compile and run - now you can use your own classes from Lua scripts.
\f0 \
\pard\pardeftab720\ri0\sa240

\f1\b\fs72 \cf2 License
\f0 \
\pard\pardeftab720\ri0

\f1\b0\fs24 \cf0 The project is open sourced under the Apache 2.0 license.
\f0 \
\pard\pardeftab720\ri0\sb480\sa120

\f1\b\fs36 \cf0 Disclaimer\
\pard\pardeftab720\ri0

\b0\fs24 \cf0 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\f0 \
\
\'a9
\f1 2012 Research In Motion Limited. All rights reserved. BlackBerry
\f0 \'ae
\f1 , RIM
\f0 \'ae
\f1 , Research In Motion
\f0 \'ae
\f1 , and related trademarks, names, and logos are the property of Research In Motion Limited and are registered and/or used in the U.S. and countries around the world.\
\
Android is a trademark of Google Inc. Apache is a trademark of The Apache Software Foundation. Apple, iPhone, iPad, Mac OS, TrueType, and Xcode are trademarks of Apple Inc. Bluetooth is a trademark of Bluetooth SIG. COLLADA and OpenGL are trademarks of Khronos Group Inc. Eclipse is a trademark of Eclipse Foundation, Inc. FBX and Maya are trademarks of Autodesk, Inc. GitHub is a trademark of Github, LLC. Linux is a trademark of Linus Torvalds. Microsoft, Windows, and Visual Studio are trademarks of Microsoft Corporation. QNX and Momentics are trademarks of QNX Software Systems Limited. All other trademarks are the property of their respective owners.\
\
\pard\pardeftab720\ri0

\f2 \cf0 This documentation including all documentation incorporated by reference herein such as documentation provided or made available at {\field{\*\fldinst{HYPERLINK "http://www.blackberry.com/go/docs"}}{\fldrslt \cf9 \ul www.blackberry.com/go/docs}}is provided or made accessible "AS IS" and "AS AVAILABLE" and without condition, endorsement, guarantee, representation, or warranty of any kind by Research In Motion Limited and its affiliated companies ("RIM") and RIM assumes no responsibility for any typographical, technical, or other inaccuracies, errors, or omissions in this documentation. In order to protect RIM proprietary and confidential information and/or trade secrets, this documentation may describe some aspects of RIM technology in generalized terms. RIM reserves the right to periodically change information that is contained in this documentation; however, RIM makes no commitment to provide any such changes, updates, enhancements, or other additions to this documentation to you in a timely manner or at all.\
\pard\pardeftab720\ri0

\f0 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 This documentation might contain references to third-party sources of information, hardware or software, products or services including components and content such as content protected by copyright and/or third-party web sites (collectively the "Third Party Products and Services"). RIM does not control, and is not responsible for, any Third Party Products and Services including, without limitation the content, accuracy, copyright compliance, compatibility, performance, trustworthiness, legality, decency, links, or any other aspect of Third Party Products and Services. The inclusion of a reference to Third Party Products and Services in this documentation does not imply endorsement by RIM of the Third Party Products and Services or the third party in any way.\
\
EXCEPT TO THE EXTENT SPECIFICALLY PROHIBITED BY APPLICABLE LAW IN YOUR JURISDICTION, ALL CONDITIONS, ENDORSEMENTS, GUARANTEES, REPRESENTATIONS, OR WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY CONDITIONS, ENDORSEMENTS, GUARANTEES, REPRESENTATIONS OR WARRANTIES OF DURABILITY, FITNESS FOR A PARTICULAR PURPOSE OR USE, MERCHANTABILITY, MERCHANTABLE QUALITY, NON-INFRINGEMENT, SATISFACTORY QUALITY, OR TITLE, OR ARISING FROM A STATUTE OR CUSTOM OR A COURSE OF DEALING OR USAGE OF TRADE, OR RELATED TO THE DOCUMENTATION OR ITS USE, OR PERFORMANCE OR NON-PERFORMANCE OF ANY SOFTWARE, HARDWARE, SERVICE, OR ANY THIRD PARTY PRODUCTS AND SERVICES REFERENCED HEREIN, ARE HEREBY EXCLUDED. YOU MAY ALSO HAVE OTHER RIGHTS THAT VARY BY STATE OR PROVINCE. SOME JURISDICTIONS MAY NOT ALLOW THE EXCLUSION OR LIMITATION OF IMPLIED WARRANTIES AND CONDITIONS. TO THE EXTENT PERMITTED BY LAW, ANY IMPLIED WARRANTIES OR CONDITIONS RELATING TO THE DOCUMENTATION TO THE EXTENT THEY CANNOT BE EXCLUDED AS SET OUT ABOVE, BUT CAN BE LIMITED, ARE HEREBY LIMITED TO NINETY (90) DAYS FROM THE DATE YOU FIRST ACQUIRED THE DOCUMENTATION OR THE ITEM THAT IS THE SUBJECT OF THE CLAIM.\
\
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW IN YOUR JURISDICTION, IN NO EVENT SHALL RIM BE LIABLE FOR ANY TYPE OF DAMAGES RELATED TO THIS DOCUMENTATION OR ITS USE, OR PERFORMANCE OR NON-PERFORMANCE OF ANY SOFTWARE, HARDWARE, SERVICE, OR ANY THIRD PARTY PRODUCTS AND SERVICES REFERENCED HEREIN INCLUDING WITHOUT LIMITATION ANY OF THE FOLLOWING DAMAGES: DIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, INDIRECT, SPECIAL, PUNITIVE, OR AGGRAVATED DAMAGES, DAMAGES FOR LOSS OF PROFITS OR REVENUES, FAILURE TO REALIZE ANY EXPECTED SAVINGS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, LOSS OF BUSINESS OPPORTUNITY, OR CORRUPTION OR LOSS OF DATA, FAILURES TO TRANSMIT OR RECEIVE ANY DATA, PROBLEMS ASSOCIATED WITH ANY APPLICATIONS USED IN CONJUNCTION WITH RIM PRODUCTS OR SERVICES, DOWNTIME COSTS, LOSS OF THE USE OF RIM PRODUCTS OR SERVICES OR ANY PORTION THEREOF OR OF ANY AIRTIME SERVICES, COST OF SUBSTITUTE GOODS, COSTS OF COVER, FACILITIES OR SERVICES, COST OF CAPITAL, OR OTHER SIMILAR PECUNIARY LOSSES, WHETHER OR NOT SUCH DAMAGES WERE FORESEEN OR UNFORESEEN, AND EVEN IF RIM HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\
\
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW IN YOUR JURISDICTION, RIM SHALL HAVE NO OTHER OBLIGATION, DUTY, OR LIABILITY WHATSOEVER IN CONTRACT, TORT, OR OTHERWISE TO YOU INCLUDING ANY LIABILITY FOR NEGLIGENCE OR STRICT LIABILITY.\
\
THE LIMITATIONS, EXCLUSIONS, AND DISCLAIMERS HEREIN SHALL APPLY: (A) IRRESPECTIVE OF THE NATURE OF THE CAUSE OF ACTION, DEMAND, OR ACTION BY YOU INCLUDING BUT NOT LIMITED TO BREACH OF CONTRACT, NEGLIGENCE, TORT, STRICT LIABILITY OR ANY OTHER LEGAL THEORY AND SHALL SURVIVE A FUNDAMENTAL BREACH OR BREACHES OR THE FAILURE OF THE ESSENTIAL PURPOSE OF THIS AGREEMENT OR OF ANY REMEDY CONTAINED HEREIN; AND (B) TO RIM AND ITS AFFILIATED COMPANIES, THEIR SUCCESSORS, ASSIGNS, AGENTS, SUPPLIERS (INCLUDING AIRTIME SERVICE PROVIDERS), AUTHORIZED RIM DISTRIBUTORS (ALSO INCLUDING AIRTIME SERVICE PROVIDERS) AND THEIR RESPECTIVE DIRECTORS, EMPLOYEES, AND INDEPENDENT CONTRACTORS.\
\
 IN ADDITION TO THE LIMITATIONS AND EXCLUSIONS SET OUT ABOVE, IN NO EVENT SHALL ANY DIRECTOR, EMPLOYEE, AGENT, DISTRIBUTOR, SUPPLIER, INDEPENDENT CONTRACTOR OF RIM OR ANY AFFILIATES OF RIM HAVE ANY LIABILITY ARISING FROM OR RELATED TO THE DOCUMENTATION.\
\
Prior to subscribing for, installing, or using any Third Party Products and Services, it is your responsibility to ensure that your airtime service provider has agreed to support all of their features. Some airtime service providers might not offer Internet browsing functionality with a subscription to the BlackBerry
\f0 \'ae
\f1  Internet Service. Check with your service provider for availability, roaming arrangements, service plans and features. Installation or use of Third Party Products and Services with RIM's products and services may require one or more patent, trademark, copyright, or other licenses in order to avoid infringement or violation of third party rights. You are solely responsible for determining whether to use Third Party Products and Services and if any third party licenses are required to do so. If required you are responsible for acquiring them. You should not install or use Third Party Products and Services until all necessary licenses have been acquired. Any Third Party Products and Services that are provided with RIM's products and services are provided as a convenience to you and are provided "AS IS" with no express or implied conditions, endorsements, guarantees, representations, or warranties of any kind by RIM and RIM assumes no liability whatsoever, in relation thereto. Your use of Third Party Products and Services shall be governed by and subject to you agreeing to the terms of separate licenses and other agreements applicable thereto with third parties, except to the extent expressly covered by a license or other agreement with RIM.\
\
Certain features outlined in this documentation require a minimum version of BlackBerry
\f0 \'ae
\f1  Enterprise Server, BlackBerry
\f0 \'ae
\f1  Desktop Software, and/or BlackBerry
\f0 \'ae
\f1  Device Software.\
\
The terms of use of any RIM product or service are set out in a separate license or other agreement with RIM applicable thereto. NOTHING IN THIS DOCUMENTATION IS INTENDED TO SUPERSEDE ANY EXPRESS WRITTEN AGREEMENTS OR WARRANTIES PROVIDED BY RIM FOR PORTIONS OF ANY RIM PRODUCT OR SERVICE OTHER THAN THIS DOCUMENTATION.\
\pard\pardeftab720\ri0

\f0 \cf0 \
\
\
\pard\pardeftab720\ri0

\f1 \cf0 Research In Motion Limited\
295 Phillip Street\
Waterloo, ON N2L 3W8\
Canada\
\pard\pardeftab720\ri0

\f0 \cf0 \
\pard\pardeftab720\ri0

\f1 \cf0 Published in Canada\
\
}